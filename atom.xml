<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[yosita]]></title>
  <subtitle><![CDATA[ѧ��]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-08T08:45:20.843Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[terry]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[中二病也要谈恋爱！恋 Lite＋SP 合辑【BD1080P】]]></title>
    <link href="http://yoursite.com/2015/12/18/bilibili/2831578/"/>
    <id>http://yoursite.com/2015/12/18/bilibili/2831578/</id>
    <published>2015-12-17T23:56:29.000Z</published>
    <updated>2015-12-08T08:45:20.843Z</updated>
    <content type="html"><![CDATA[<div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=2831578&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div>
]]></content>
    <summary type="html">
    <![CDATA[<div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http]]>
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
      <category term="helloworld" scheme="http://yoursite.com/categories/helloworld/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swift process]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/process/"/>
    <id>http://yoursite.com/2015/12/15/swift/process/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:44:32.316Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift_Evolution_Process">Swift Evolution Process</h1><p>Swift is a powerful and intuitive programming language that is designed to make writing and maintaining correct programs easier. Swift is growing and evolving, guided by a community-driven process referred to as the Swift evolution process. This document outlines the Swift evolution process and how a feature grows from a rough idea into something that can improve the Swift development experience for millions of programmers.</p>
<h2 id="Scope">Scope</h2><p>The Swift evolution process covers all changes to the Swift language and the public interface of the Swift standard library, including new language features and APIs (no matter how small), changes to existing language features or APIs, removal of existing features, and so on. Smaller changes, such as bug fixes, optimizations, or diagnostic improvements can be contributed via the normal contribution process; see <a href="https://swift.org/community/#contributing" target="_blank" rel="external">Contributing to Swift</a>.</p>
<h2 id="Goals">Goals</h2><p>The Swift evolution process aims to leverage the collective ideas, insights, and experience of the Swift community to improve the Swift development experience. Its two primary goals are:</p>
<ul>
<li>Engage the wider Swift community in the ongoing evolution of Swift, and</li>
<li>Maintain the vision and conceptual coherence of Swift.</li>
</ul>
<p>There is a natural tension between these two goals. Open evolution processes are, by nature, chaotic. Yet, maintaining a coherent vision for something as complicated as a programming language requires some level of coordination. The Swift evolution process aims to strike a balance that best serves the Swift community as a whole.</p>
<h2 id="Participation">Participation</h2><p>Everyone is welcome to propose, discuss, and review ideas to improve<br>the Swift language and standard library on the <a href="https://swift.org/community/#swift-evolution" title="Swift evolution mailing list" target="_blank" rel="external">swift-evolution<br>mailing list</a>. Before posting a review,<br>please see the section “What goes into a review?” below.</p>
<p>The Swift <a href="https://swift.org/community/#core-team" target="_blank" rel="external">core team</a> is<br>responsible for the strategic direction of Swift. Core team members<br>initiate, participate in, and manage the public review of proposals<br>and have the authority to accept or reject changes to Swift.</p>
<h2 id="What_goes_into_a_review?">What goes into a review?</h2><p>The goal of the review process is to improve the proposal under review<br>through constructive criticism and, eventually, determine the<br>direction of Swift. When writing your review, here are some questions<br>you might want to answer in your review:</p>
<ul>
<li>What is your evaluation of the proposal?</li>
<li>Is the problem being addressed significant enough to warrant a change to Swift?</li>
<li>Does this proposal fit well with the feel and direction of Swift?</li>
<li>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?</li>
<li>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?</li>
</ul>
<p>Please state explicitly whether you believe that the proposal should be accepted into Swift.</p>
<h2 id="How_to_propose_a_change">How to propose a change</h2><ul>
<li><strong>Socialize the idea</strong>: propose a rough sketch of the idea on the <a href="https://swift.org/community/#swift-evolution" title="Swift evolution mailing list" target="_blank" rel="external">swift-evolution mailing list</a>, the problems it solves, what the solution looks like, etc., to gauge interest from the community.</li>
<li><strong>Develop the proposal</strong>: expand the rough sketch into a complete proposal, using the <a href="0000-template.md">proposal template</a>, and continue to refine the proposal on the evolution mailing list. Prototyping an implementation and its uses along with the proposal is encouraged, because it helps ensure both technical feasibility of the proposal as well as validating that the proposal solves the problems it is meant to solve.</li>
<li><strong>Request a review</strong>: initiate a pull request to the <a href="https://github.com/apple/swift-evolution" title="Swift evolution repository" target="_blank" rel="external">swift-evolution repository</a> to indicate to the core team that you would like the proposal to be reviewed. When the proposal is sufficiently detailed and clear, and addresses feedback from earlier discussions of the idea, the pull request will be accepted. The proposal will be assigned a proposal number as well as a core team member to manage the review.</li>
<li><strong>Address feedback</strong>: in general, and especially <a href="#review">during the review period</a>, be responsive to questions and feedback about the proposal.</li>
</ul>
<h2 id="Review_process">Review process</h2><p>The review process for a particular proposal begins when a member of<br>the core team accepts a pull request of a new or updated proposal into<br>the <a href="https://github.com/apple/swift-evolution" title="Swift evolution repository" target="_blank" rel="external">swift-evolution repository</a>. That core team<br>member becomes the <em>review manager</em> for the proposal. The proposal<br>is assigned a proposal number (if it is a new proposal), then enters<br>the review queue.</p>
<p>The review manager will work with the proposal authors to schedule the<br>review. Reviews usually last a single week, but can run longer for<br>particularly large or complex proposals.</p>
<p>When the scheduled review period arrives, the review manager will post<br>the proposal to the <a href="https://swift.org/community/#swift-evolution" title="Swift evolution mailing list" target="_blank" rel="external">swift-evolution mailing<br>list</a> with the subject “[Review]”<br>followed by the proposal title and update the list of active<br>reviews. To avoid delays, it is important that the proposal authors be<br>available to answer questions, address feedback, and clarify their<br>intent during the review period.</p>
<p>After the review has completed, the core team will make a decision on<br>the proposal. The review manager is responsible for determining<br>consensus among the core team members, then reporting their decision<br>to the proposal authors and mailing list. The review manager will<br>update the proposal’s state in the <a href="https://github.com/apple/swift-evolution" title="Swift evolution repository" target="_blank" rel="external">swift-evolution<br>repository</a> to reflect that decision.</p>
<h2 id="Proposal_states">Proposal states</h2><p>A given proposal can be in one of several states:</p>
<ul>
<li><strong>Awaiting review</strong>: the proposal is awaiting review. Once known,<br>the dates for the actual review will be placed in the proposal<br>document and updated in the <a href="schedule.md">review schedule</a>. When the<br>review period begins, the review manager will update the state to<br><em>under review</em>.</li>
<li><strong>Under review</strong>: the proposal is undergoing public review on the <a href="https://swift.org/community/#swift-evolution" title="Swift evolution mailing list" target="_blank" rel="external">swift-evolution mailing list</a>. </li>
<li><strong>Under revision</strong>: the proposal is undergoing revision by the<br>author(s) based on feedback from the review.</li>
<li><strong>Deferred</strong>: consideration of the proposal has been deferred<br>because it does not meet the <a href="README.md">goals of the upcoming major Swift<br>release</a>. Deferred proposals will be reconsidered when<br>scoping the next major Swift release.</li>
<li><strong>Accepted</strong>: the proposal has been accepted and is either awaiting<br>implementation or is actively being implemented. Once a proposal<br>enters the “accepted” state, it gets placed into its <a href="README.md">target Swift<br>release</a>.</li>
<li><strong>Rejected</strong>: the proposal has been considered and rejected.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift_Evolution_Process">Swift Evolution Process</h1><p>Swift is a powerful and intuitive programming language that is designed to m]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0001-keywords-as-argument-labels]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0001-keywords-as-argument-labels/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0001-keywords-as-argument-labels/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:44:45.346Z</updated>
    <content type="html"><![CDATA[<h1 id="Allow_(most)_keywords_as_argument_labels">Allow (most) keywords as argument labels</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md" target="_blank" rel="external">SE-0001</a></li>
<li>Author: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
<li>Status: <strong>Accepted</strong></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>Argument labels are an important part of the interface of a Swift function, describing what particular arguments to the function do and improving readability. Sometimes, the most natural label for an argument coincides with a language keyword, such as <code>in</code>, <code>repeat</code>, or <code>defer</code>. Such keywords should be allowed as argument labels, allowing better expression of these interfaces.</p>
<h2 id="Motivation">Motivation</h2><p>In some functions, the best argument label for a particular parameter<br>happens to coincide with a language keyword. For example, consider a<br>module-scope function that finds the index of a particular value in a<br>collection. A natural name for this would be <code>indexOf(_:in:)</code>:</p>
<pre><code><span class="function"><span class="title">indexOf</span><span class="params">(value, in: collection)</span></span>
</code></pre><p>However, because <code>in</code> is a keyword, one would actually have to use backticks to escape the <code>in</code>, e.g.:</p>
<pre><code><span class="function"><span class="title">indexOf</span><span class="params">(value, `in`: collection)</span></span>
</code></pre><p>When defining new APIs in Swift, authors will tend to pick other<br>non-keyword words (e.g., <code>within</code> for this example), even if they<br>aren’t ideal. However, this issue also comes up when importing<br>Objective-C APIs under the “omit needless words” heuristics, requiring<br>escaping to use those APIs. For example:</p>
<pre><code>event.<span class="function"><span class="title">touchesMatching</span><span class="params">([.Began, .Moved], `in`: view)</span></span>
<span class="function"><span class="title">NSXPCInterface</span><span class="params">(`protocol`: SomeProtocolType.Protocol)</span></span>
</code></pre><h2 id="Proposed_solution">Proposed solution</h2><p>Allow the use of all keywords except <code>inout</code>, <code>var</code>, and <code>let</code> as argument labels. This affects the grammar in three places:</p>
<ul>
<li><p>Call expressions, such as the examples above. Here, we have no grammatic ambiguities, because “<keyword> `:`“ does not appear in any grammar production within a parenthesized expression list. This is, by far, the most important case.</keyword></p>
</li>
<li><p>Function/subscript/initializer declarations: aside from the three exclusions above, there is no ambiguity here because the keyword will always be followed by an identifier, ‘:’, or ‘_’. For example:</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">touchesMatching</span><span class="params">(phase: NSTouchPhase, <span class="keyword">in</span> view: NSView?)</span></span> -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br></pre></td></tr></table></figure>
<p>  Keywords that introduce or modify a parameter—-currently just<br>“inout”, “let”, and “var”—-will need to retain their former<br>meanings. If we invent an API that uses such keywords, they will still<br>need to be back-ticked:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">addParameter</span><span class="params">(name: String, `<span class="keyword">inout</span>`: Bool)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Function types: these are actually easier than #2, because the parameter name is always followed by a ‘:’:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">NSTouchPhase</span>, <span class="keyword">in</span>: <span class="type">NSView</span>?) -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br><span class="line">(<span class="type">String</span>, <span class="keyword">inout</span>: <span class="type">Bool</span>) -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>This functionality is strictly additive, and does not break any existing<br>code: it only makes some previously ill-formed code well-formed, and<br>does not change the behavior of any well-formed code.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>The primarily alternative here is to do nothing: Swift APIs will<br>continue to avoid keywords for argument labels, even when they are the<br>most natural word for the label, and imported APIs will either<br>continue to use backticks or will need to be renamed. This alternative<br>leaves a large number of imported APIs (nearly 200) requiring either<br>some level of renaming of the API or backticks at the call site.</p>
<p>A second alternative is to focus on <code>in</code> itself, which is by far the<br>most common keyword argument in imported APIs. In a brief survey of<br>imported APIs, <code>in</code> accounted for 90% of the conflicts with existing<br>keywords. Moreover, the keyword <code>in</code> is only used in two places in the<br>Swift grammar–for loops and closures–so it could be made<br>context-sensitive. However, this solution is somewhat more complicated<br>(because it requires more context-sensitive keyword parsing) and less<br>general.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Allow_(most)_keywords_as_argument_labels">Allow (most) keywords as argument labels</h1><ul>
<li>Proposal: <a href="https://github.co]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0002-remove-currying]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0002-remove-currying/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0002-remove-currying/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:44:58.586Z</updated>
    <content type="html"><![CDATA[<h1 id="Removing_currying_func_declaration_syntax">Removing currying <code>func</code> declaration syntax</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md" target="_blank" rel="external">SE-0002</a></li>
<li>Author(s): <a href="https://github.com/jckarter" target="_blank" rel="external">Joe Groff</a></li>
<li>Status: <strong>Accepted</strong></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>Curried function declaration syntax <code>func foo(x: Int)(y: Int)</code> is of limited<br>usefulness and creates a lot of language and implementation complexity. We<br>should remove it.</p>
<h2 id="Motivation">Motivation</h2><p>The presence of curried function syntax has knock-on effects, complicating<br>other language features:</p>
<ul>
<li>The presence of currying invites confusion over keyword rules and the<br>declaration name of functions. We’ve argued several times over whether<br>curried arguments represent a continuation of the function’s arguments, begin<br>the argument list of a new function, or deserve to follow different rules<br>altogether.</li>
<li>It has subtle interactions with ‘var’ and ‘inout’ argument<br>annotations. A curried function with ‘inout’ parameters anywhere other than<br>its first clause cannot be partially applied without surprising semantic<br>restrictions, limiting its usefulness. With ‘var’ parameters, there’s the<br>question of at what level the ‘var’ gets bound; many users expect it at the<br>outermost partial application, but we currently bind at the innermost partial<br>application.</li>
</ul>
<p>The idioms of the standard library, Cocoa, and most third-party code don’t<br>really make ML-style argument currying of free functions profitable. In<br>Cocoa and the standard library, most things are methods, where we can still get<br>useful partial application via <code>self.method</code> and maybe someday <code>.map { f($0)
}</code> as well. The curried function design also predates the design of the<br>keyword argument model. We have plans to move away<br>from the arguments-are-a-single-tuple model too (which is already belied by<br>things like <code>@autoclosure</code> and <code>inout</code>), which pushes us even further away from<br>the ML argument model.</p>
<p>Many users have observed the uselessness of our currying feature, and asked for<br>Scala-style <code>f(_, 1)</code> freeform partial application as an alternative. The fact<br>that even functionally-oriented users don’t see much value in our currying<br>feature makes me feel like we might be better off without it. It definitely fails<br>the “would we add it if we didn’t have it already” test.</p>
<h2 id="Detailed_design">Detailed design</h2><p>We remove support for multiple argument patterns in <code>func</code> declarations,<br>reducing the grammar for <code>func-signature</code> to allow only one <code>argument</code> clause.<br>For migration purposes, existing code that uses currying declaration syntax<br>can be transformed to explicitly return a closure instead:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before:</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span>(y: <span class="type">String</span>) -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Float</span>(x) + <span class="type">Float</span>(y)!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// After:</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span> -&gt; (<span class="type">String</span>) -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;(y: <span class="type">String</span>) -&gt; <span class="type">Float</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Float</span>(x) + <span class="type">Float</span>(y)!</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I don’t propose changing the semantics of methods, which formally remain<br>functions of type <code>Self -&gt; Args -&gt; Return</code>.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>This is removing a language feature, so will obviously break existing code<br>that uses the feature. We feel that currying is of sufficiently marginal<br>utility, runs against the grain of emerging language practice, and there’s a<br>reasonable automatic migration, so the impact is acceptable in order to<br>simplify the language.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>The alternative would be to preserve currying as-is, which as discussed above,<br>is not ideal. Although I don’t propose taking any immediate action, future<br>alternative designs to provide similar functionality in a more idiomatic way<br>include:</p>
<ul>
<li>Scala-like ad-hoc partial application syntax, such that something like<br><code>foo(_, bar: 2)</code> would be shorthand for <code>{ x in foo(x, bar: 2) }</code>. This<br>has the benefit of arguably being more readable with our keyword-argument-<br>oriented API design, and also more flexible than traditional currying,<br>which requires argument order to be preconsidered by the API designer.</li>
<li>Method and/or operator slicing syntax. We have <code>self.method</code> to partially<br>bind a method to its <code>self</code> parameter, and could potentially add<br><code>.method(argument)</code> to partially bind a method to its non-self arguments,<br>which would be especially useful for higher-order methods like <code>map</code><br>and <code>filter</code>. Haskell-like <code>(2+)</code>/<code>(+2)</code> syntax for partially applying<br>operators might also be nice.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Removing_currying_func_declaration_syntax">Removing currying <code>func</code> declaration syntax</h1><ul>
<li>Proposal: <a href="ht]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0003-remove-var-parameters-patterns]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0003-remove-var-parameters-patterns/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0003-remove-var-parameters-patterns/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:45:08.288Z</updated>
    <content type="html"><![CDATA[<h1 id="Removing_var_from_Function_Parameters_and_Pattern_Matching">Removing <code>var</code> from Function Parameters and Pattern Matching</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md" target="_blank" rel="external">SE-0003</a></li>
<li>Author(s): <a href="https://github.com/bitjammer" target="_blank" rel="external">David Farler</a></li>
<li>Status: <strong>Accepted</strong></li>
<li>Review manager: <a href="https://github.com/jopamer" target="_blank" rel="external">Joe Pamer</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>Value types are a major asset to the Swift language, affording safety and the<br>ability to reason about the effects of mutation by working with a locally copied<br>instance. When you want to create a <em>mutable</em> copy of a value, you create a<br><em>variable</em>, marked with the <code>var</code> keyword. Not only can you create variables as<br>explicit declarations, you can override bindings that are normally immutable<br><em>constants</em> by marking them with <code>var</code> too.</p>
<p>Function parameters are immutable by default:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(i: Int)</span></span> &#123;</span><br><span class="line">  i += <span class="number">1</span> <span class="comment">// illegal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(<span class="keyword">var</span> i: Int)</span></span> &#123;</span><br><span class="line">  i += <span class="number">1</span> <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So-called <em>refutable pattern</em> matches, that will bind an optional value and<br>provide the binding to a body of code are also immutable by default:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x = getOptionalFoo() &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// illegal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> x = getOptionalFoo() &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> x = gen.next() &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// illegal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">var</span> x = gen.next() &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">guard <span class="keyword">let</span> x = gen.next() <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">x.mutatingMethod() <span class="comment">// illegal</span></span><br><span class="line"></span><br><span class="line">guard <span class="keyword">var</span> x = gen.next() <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">x.mutatingMethod() <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> optionalInt &#123;</span><br><span class="line">  <span class="keyword">case</span> .<span class="type">None</span>: <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> x):</span><br><span class="line">    x += <span class="number">1</span> <span class="comment">// illegal</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> optionalInt &#123;</span><br><span class="line">  <span class="keyword">case</span> .<span class="type">None</span>: <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">var</span> x):</span><br><span class="line">    x += <span class="number">1</span> <span class="comment">// OK</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For-in statements also allow variable bindings:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sequence &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// illegal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> x <span class="keyword">in</span> sequence &#123;</span><br><span class="line">  x.mutatingMethod() <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using <code>var</code> annotations on function parameters and pattern bindings in if-,<br>while-, guard-, case-, and for-in statements have limited utility, optimizing<br>for a line of code at the cost of confusion. To emphasize the fact these values<br>are unique copies, we should not allow use of <code>var</code> in these places.</p>
<h2 id="Motivation">Motivation</h2><p><code>var</code> allows one to reassign and call mutating methods on value types, but there<br>is an <em>implicit</em> local copy of the value, yet there can be confusion that <code>var</code><br>somehow makes values types have <em>reference semantics</em> or <em>inout semantics</em>. To<br>make it very clear, we want to require a separated, <em>explicit</em> <code>var</code> declaration<br>and make bindings of function parameters and pattern matches <em>always</em> their<br>default - immutable constants.</p>
<h3 id="Function_Parameters">Function Parameters</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">doSomethingWithVar</span><span class="params">(<span class="keyword">var</span> x: Int)</span></span> &#123;</span><br><span class="line">  x = <span class="number">2</span> <span class="comment">// The caller of this function can't observe this assignment.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, the <em>local copy</em> of <code>x</code> mutates but the write does not propagate back to<br>the original value that was passed, so the caller can never observe the change<br>directly.  For that to happen to value types, you have to mark the parameter<br>with <code>inout</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">doSomethingWithInout</span><span class="params">(<span class="keyword">inout</span> i: Int)</span></span> &#123;</span><br><span class="line">  i = <span class="number">2</span> <span class="comment">// This will have an effect on the caller's Int that was passed.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">doSomethingWithVar(x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">doSomethingWithInout(&amp;x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3 id="var_Bindings_in_Pattern_Matching"><code>var</code> Bindings in Pattern Matching</h3><p>This problem can also manifest in the local scopes wherever pattern matching is<br>allowed:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">getOptionalNumber</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = getOptionalNumber()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> x = x &#123;</span><br><span class="line">  x = doSomethingWith(x) <span class="comment">// Whoops! Doesn't affect the original `x`!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>In summary, the problems that motivate this change are:</p>
<ul>
<li><code>var</code> is often confused with <code>inout</code> in function parameters.</li>
<li><code>var</code> is often confused to make value types have reference semantics.</li>
<li>Use of <code>var</code> at these sites don’t make the intention of creating a unique,<br>local, mutable copy as explicit and clear as it could be.</li>
</ul>
<h2 id="Proposed_solution">Proposed solution</h2><ul>
<li>All function parameters are either unannotated constants or are marked with <code>inout</code>.</li>
<li>Only <code>if let</code> is allowed, not <code>if var</code>.</li>
<li>Only <code>guard let</code> is allowed, not <code>guard var</code>.</li>
<li>Only <code>while let</code> is allowed, not <code>while var</code>.</li>
<li>Only <code>case .Some(let x)</code> is allowed, not <code>case .Some(var x)</code>.</li>
<li>Only <code>for x in</code> is allowed, not <code>for var x in</code>.</li>
</ul>
<h2 id="Design">Design</h2><p>The above changes can be made almost entirely in the parser, triggering error<br>diagnostics.  Function parameters explictly marked with <code>let</code> will be a warning<br>because they are immutable by default. In addition, the compiler will stop<br>suggesting <code>var</code> when trying to directly mutate function arguments.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>As a purely mechanical migration away from these uses of <code>var</code>, a temporary<br>variable can be immediately introduced that shadows the immutable copy in all of<br>the above uses. For example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x = getOptionalInt() &#123;</span><br><span class="line">  <span class="keyword">var</span> x = x</span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, uses of these variable bindings often indicate an anti-pattern or<br>misunderstanding of the scope of mutation of value types. For example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">mkdtemp</span><span class="params">(<span class="keyword">var</span> <span class="keyword">prefix</span>: String?)</span></span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">prefix</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">prefix</span> = getenv(<span class="string">"TMPDIR"</span>) ?? <span class="string">"/tmp"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">Path</span>(<span class="keyword">prefix</span>, getUniqueSuffix())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>prefix</code> is only ever assigned once so the following code suffices and<br>only uses immutable values:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">mkdtemp</span><span class="params">(<span class="keyword">prefix</span>: String?)</span></span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Path</span>(<span class="keyword">prefix</span> ?? getenv(<span class="string">"TMPDIR"</span>) ?? <span class="string">"/tmp"</span>, getUniqueSuffix())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So, we expect users of Swift to rethink some of their existing code where these<br>are used.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>This is the best approach to alternate/new syntax or terminology because:</p>
<ul>
<li>It removes confusion by offering only one “switch” to flip to get a mutable<br>value.</li>
<li>It makes use of mutable variables stand out as an explicit line of code<br>instead of being embedded in other syntax.</li>
<li>It promotes use of immutable constants.</li>
<li>It makes the language smaller.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Removing_var_from_Function_Parameters_and_Pattern_Matching">Removing <code>var</code> from Function Parameters and Pattern Matching<]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0004-remove-pre-post-inc-decrement]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0004-remove-pre-post-inc-decrement/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0004-remove-pre-post-inc-decrement/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:45:23.401Z</updated>
    <content type="html"><![CDATA[<h1 id="Remove_the_++_and_-_operators">Remove the <code>++</code> and <code>--</code> operators</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="external">SE-0004</a></li>
<li>Author: <a href="https://github.com/lattner" target="_blank" rel="external">Chris Lattner</a></li>
<li>Status: <strong>Accepted</strong></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>The increment/decrement operators in Swift were added very early in the<br>development of Swift, as a carry-over from C.  These were added without much<br>consideration, and haven’t been thought about much since then.  This document<br>provides a fresh look at them, and ultimately recommends we just remove them<br>entirely, since they are confusing and not carrying their weight.</p>
<p>As a quick refresher, there are four operators in this family:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = ++x  <span class="comment">// pre-increment  - returns input value after mutation</span></span><br><span class="line"><span class="keyword">let</span> b = x++  <span class="comment">// post-increment - returns copy of input value before mutation</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = --x  <span class="comment">// pre-decrement  - returns input value after mutation</span></span><br><span class="line"><span class="keyword">let</span> d = x--  <span class="comment">// post-decrement - returns copy of input value before mutation</span></span><br></pre></td></tr></table></figure>
<p>However, the result value of these operators are frequently ignored.</p>
<h2 id="Advantages_of_These_Operators">Advantages of These Operators</h2><p>The primary advantage of these operators is their expressive capability.  They<br>are shorthand for (e.g.) <code>x += 1</code> on a numeric type, or <code>x.advance()</code> on an<br>iterator-like value.  When the return value is needed, the Swift <code>+=</code> operator<br>cannot be used in-line, since (unlike C) it returns <code>Void</code>.</p>
<p>The second advantage of Swift supporting this family of operators is continuity<br>with C, and other common languages in the extended C family (C++, Objective-C,<br>Java, C#, Javascript, etc).  People coming to Swift from these other languages<br>may reasonably expect these operators to exist.  That said, there are also<br>popular languages which have kept the majority of C operators but dropped these<br>(e.g. Python).</p>
<h2 id="Disadvantages_of_These_Operators">Disadvantages of These Operators</h2><ol>
<li><p>These operators increase the burden to learn Swift as a first programming<br>language - or any other case where you don’t already know these operators from a<br>different language.</p>
</li>
<li><p>Their expressive advantage is minimal - <code>x++</code> is not much shorter<br>than <code>x += 1</code>.</p>
</li>
<li><p>Swift already deviates from C in that the <code>=</code>, <code>+=</code> and other assignment-like<br>operations returns <code>Void</code> (for a number of reasons).  These operators are<br>inconsistent with that model.</p>
</li>
<li><p>Swift has powerful features that eliminate many of the common reasons you’d<br>use <code>++i</code> in a C-style for loop in other languages, so these are relatively<br>infrequently used in well-written Swift code.  These features include<br>the <code>for-in</code> loop, ranges, <code>enumerate</code>, <code>map</code>, etc.</p>
</li>
<li><p>Code that actually uses the result value of these operators is often<br>confusing and subtle to a reader/maintainer of code.  They encourage “overly<br>tricky” code which may be cute, but difficult to understand.</p>
</li>
<li><p>While Swift has well defined order of evaluation, any code that depended on<br>it (like <code>foo(++a, a++)</code>) would be undesirable even if it was well-defined.</p>
</li>
<li><p>These operators are applicable to relatively few types: integer and floating<br>point scalars, and iterator-like concepts. They do not apply to complex numbers,<br>matrices, etc.  </p>
</li>
</ol>
<p>Finally, these fail the metric of “if we didn’t already have these, would we add<br>them to Swift 3?”</p>
<h2 id="Proposed_Approach">Proposed Approach</h2><p>We should just drop these operators entirely.  In terms of roll-out, we should<br>deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover<br>common cases), and remove them completely in Swift 3.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>Simplest alternative: we could keep them. More interesting to consider, we could<br>change these operators to return Void.  This solves some of the problems above,<br>but introduces a new question: once the result is gone, the difference between<br>the prefix and postfix form also vanishes.  Given that, we would have to pick<br>between these unfortunate choices:</p>
<p>1) Keep both <code>x++</code> and <code>++x</code> in the language, even though they do the same<br>thing.</p>
<p>2) Drop one of <code>x++</code> or <code>++x</code>.  C++ programmers generally prefer the prefix<br>forms, but everyone else generally prefers the postfix forms.  Dropping either<br>one would be a significant deviation from C.</p>
<p>Despite considering these options carefully, they still don’t justify the<br>complexity that the operators add to Swift.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Remove_the_++_and_-_operators">Remove the <code>++</code> and <code>--</code> operators</h1><ul>
<li>Proposal: <a href="https://gith]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0005-objective-c-name-translation]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0005-objective-c-name-translation/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0005-objective-c-name-translation/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:45:33.265Z</updated>
    <content type="html"><![CDATA[<h1 id="Better_Translation_of_Objective-C_APIs_Into_Swift">Better Translation of Objective-C APIs Into Swift</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md" target="_blank" rel="external">SE-0005</a></li>
<li>Author(s): <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a>, <a href="https://github.com/dabrahams" target="_blank" rel="external">Dave Abrahams</a></li>
<li>Status: <strong>Accepted</strong></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>This proposal describes how we can improve Swift’s “Clang Importer”, which is responsible for mapping C and Objective-C APIs into Swift, to translate the names of Objective-C functions, types, methods, properties, etc. into names that more closely align with the <a href="https://swift.org/documentation/api-design-guidelines.html" title="API Design Guidelines" target="_blank" rel="external">Swift API Design Guidelines</a> being developed as part of Swift 3. Our approach focuses on the differences between the Objective-C <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" title="Coding Guidelines for Cocoa" target="_blank" rel="external">Coding Guidelines for Cocoa</a> and the Swift API Design Guidelines, using some simple linguistic analysis to aid the automatic translation from Objective-C names to more “Swifty” names.</p>
<h2 id="Motivation">Motivation</h2><p>The Objective-C <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" title="Coding Guidelines for Cocoa" target="_blank" rel="external">Coding Guidelines for Cocoa</a><br>provide a framework for creating clear, consistent APIs in<br>Objective-C, where they work extraordinarily well. However, Swift is a<br>different language: in particular, it is strongly typed and provides<br>type inference, generics, and overloading. As a result, Objective-C<br>APIs that feel right in Objective-C can feel wordy when used in<br>Swift. For example:</p>
<pre><code>let contentString = listItemView<span class="class">.stringValue</span><span class="class">.stringByTrimmingCharactersInSet</span>(
   NSCharacterSet.<span class="function"><span class="title">whitespaceAndNewlineCharacterSet</span><span class="params">()</span></span>)
</code></pre><p>The APIs used here follow the Objective-C guidelines. A more “Swifty”<br>version of the same code might instead look like this:</p>
<pre><code>let <span class="attribute">content</span> = listItem<span class="class">.stringValue</span><span class="class">.trimming</span>(.whitespaceAndNewlines)
</code></pre><p>The latter example more closely adheres to the <a href="https://swift.org/documentation/api-design-guidelines.html" title="API Design Guidelines" target="_blank" rel="external">Swift API Design<br>Guidelines</a>, in particular, omitting “needless”<br>words that restate the types already enforced by the compiler (view,<br>string, character set, etc.). The goal of this proposal is to make<br>imported Objective-C feel more “Swifty”, providing a more fluid<br>experience for Swift programmers using Objective-C APIs.</p>
<p>The solution in this proposal applies equally to the Objective-C<br>frameworks (e.g., all of Cocoa and Cocoa Touch) and any Objective-C<br>APIs that are available to Swift in mix-and-match projects. Note that<br>the <a href="https://swift.org/core-libraries/" title="Swift Core Libraries" target="_blank" rel="external">Swift core libraries</a><br>reimplement the APIs of Objective-C frameworks, so any API changes to<br>those frameworks (Foundation, XCTest, etc.) will be reflected in the<br>Swift 3 implementations of the core libraries.</p>
<h2 id="Proposed_solution">Proposed solution</h2><p>The proposed solution involves identifying the differences between the<br>Objective-C <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" title="Coding Guidelines for Cocoa" target="_blank" rel="external">Coding Guidelines for Cocoa</a> and<br>the <a href="https://swift.org/documentation/api-design-guidelines.html" title="API Design Guidelines" target="_blank" rel="external">Swift API Design Guidelines</a> to build a<br>set of transformations that map from the former to the latter based on<br>the guidelines themselves and other observed conventions in<br>Objective-C. This is an extension of other heuristics in the Clang<br>importer that translate names, e.g., the mapping of global enum<br>constants into Swift’s cases (which strips common prefixes from the<br>enum constant names) and the mapping from Objective-C factory methods<br>(e.g., <code>+[NSNumber numberWithBool:]</code>) to Swift initializers<br>(<code>NSNumber(bool: true)</code>).</p>
<p>The heuristics described in this proposal will require iteration,<br>tuning, and experimentation across a large body of Objective-C APIs to<br>get right. Moreover, it will not be perfect: some APIs will<br>undoubtedly end up being less clear in Swift following this<br>translation than they had been before. Therefore, the goal is to make<br>the vast majority of imported Objective-C APIs feel more “Swifty”, and<br>allow the authors of Objective-C APIs that end up being less clear to<br>address those problems on a per-API basis via annotation within the<br>Objective-C headers.</p>
<p>The proposed solution involves several related changes to the Clang importer:</p>
<ol>
<li><p><strong>Generalize the applicability of the <code>swift_name</code> attribute</strong>: The<br>Clang <code>swift_name</code> attribute currently allows limited renaming of enum<br>cases and factory methods. It should be generalized to allow arbitrary<br>renaming of any C or Objective-C entity when it is imported into<br>Swift, allowing authors of C or Objective-C APIs more fine-grained<br>control over the process.</p>
</li>
<li><p><strong>Prune redundant type names</strong>: The Objective-C Coding Guidelines for Cocoa require that the method describe each argument. When those descriptions restate the type of the corresponding parameter, the name conflicts with the <a href="https://swift.org/documentation/api-design-guidelines.html#omit-needless-words" target="_blank" rel="external">omit needless words</a> guideline for Swift APIs. Therefore, we prune these type names during import.</p>
</li>
<li><p><strong>Add default arguments</strong>: In cases where the Objective-C API strongly hints at the need for a default argument, infer the default argument when importing the API. For example, an option-set parameter can be defaulted to <code>[]</code>.</p>
</li>
<li><p><strong>Add first argument labels</strong>: If the first parameter of a method is defaulted, <a href="https://swift.org/documentation/api-design-guidelines.html#first-argument-label" target="_blank" rel="external">it should have an argument label</a>. Determine a first argument label for that method.</p>
</li>
<li><p><strong>Prepend “is” to Boolean properties</strong>: <a href="https://swift.org/documentation/api-design-guidelines.html#first-argument-label" target="_blank" rel="external">Boolean properties should read as assertions on the receiver</a>, but the Objective-C Coding Guidelines for Cocoa <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" target="_blank" rel="external">prohibit the use of “is” on properties</a>. Import such properties with “is” prepended.</p>
</li>
<li><p><strong>Strip the “NS” prefix from Foundation APIs</strong>: Foundation is a<br>fundamental part of the <a href="https://swift.org/core-libraries/" title="Swift Core Libraries" target="_blank" rel="external">Swift Core Libraries</a>, and<br>having the prefixes on these cross-platform APIs feels<br>anachronistic. Therefore, remove the “NS” prefix from entities defined<br>in the Foundation module (and other specifically identified modules where it makes sense).</p>
</li>
</ol>
<p>To get a sense of what these transformations do, consider a portion of<br>the imported <code>UIBezierPath</code> API in Swift 2:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">UIBezierPath</span> : <span class="title">NSObject</span>, <span class="title">NSCopying</span>, <span class="title">NSCoding</span> </span>{
  convenience <span class="keyword">init</span>(ovalInRect: <span class="type">CGRect</span>)
  <span class="func"><span class="keyword">func</span> <span class="title">moveToPoint</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addLineToPoint</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addCurveToPoint</span><span class="params">(<span class="number">_</span>: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addQuadCurveToPoint</span><span class="params">(<span class="number">_</span>: CGPoint, controlPoint: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">appendPath</span><span class="params">(<span class="number">_</span>: UIBezierPath)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">bezierPathByReversingPath</span><span class="params">()</span></span> -&gt; <span class="type">UIBezierPath</span>
  <span class="func"><span class="keyword">func</span> <span class="title">applyTransform</span><span class="params">(<span class="number">_</span>: CGAffineTransform)</span></span>
  <span class="keyword">var</span> empty: <span class="type">Bool</span> { <span class="keyword">get</span> }
  <span class="func"><span class="keyword">func</span> <span class="title">containsPoint</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span> -&gt; <span class="type">Bool</span>
  <span class="func"><span class="keyword">func</span> <span class="title">fillWithBlendMode</span><span class="params">(<span class="number">_</span>: CGBlendMode, alpha: CGFloat)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">strokeWithBlendMode</span><span class="params">(<span class="number">_</span>: CGBlendMode, alpha: CGFloat)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">copyWithZone</span><span class="params">(<span class="number">_</span>: NSZone)</span></span> -&gt; <span class="type">AnyObject</span>
  <span class="func"><span class="keyword">func</span> <span class="title">encodeWithCoder</span><span class="params">(<span class="number">_</span>: NSCoder)</span></span>
}
</code></pre><p>And the same API imported under our current, experimental implementation of this proposal:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">UIBezierPath</span> : <span class="title">Object</span>, <span class="title">Copying</span>, <span class="title">Coding</span> </span>{
  convenience <span class="keyword">init</span>(ovalIn: <span class="type">CGRect</span>)
  <span class="func"><span class="keyword">func</span> <span class="title">moveTo</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addLineTo</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addCurveTo</span><span class="params">(<span class="number">_</span>: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">addQuadCurveTo</span><span class="params">(<span class="number">_</span>: CGPoint, controlPoint: CGPoint)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span>: UIBezierPath)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">reversing</span><span class="params">()</span></span> -&gt; <span class="type">UIBezierPath</span>
  <span class="func"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(<span class="number">_</span>: CGAffineTransform)</span></span>
  <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> { <span class="keyword">get</span> }
  <span class="func"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span>: CGPoint)</span></span> -&gt; <span class="type">Bool</span>
  <span class="func"><span class="keyword">func</span> <span class="title">fillWith</span><span class="params">(<span class="number">_</span>: CGBlendMode, alpha: CGFloat)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">strokeWith</span><span class="params">(<span class="number">_</span>: CGBlendMode, alpha: CGFloat)</span></span>
  <span class="func"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(zone <span class="number">_</span>: Zone = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">AnyObject</span>
  <span class="func"><span class="keyword">func</span> <span class="title">encodeWith</span><span class="params">(<span class="number">_</span>: Coder)</span></span>
}
</code></pre><p>In the latter case, a number of words that restated type information<br>in the original APIs have been pruned. The result is closer to<br>following the Swift API Design Guidelines. For example, this shows<br>that Swift developers can now copy any object conforming to the<br>NSCopying with a simple call to <code>foo.copy()</code> instead of calling<br><code>foo.copyWithZone(nil)</code>.</p>
<h2 id="Implementation_Experience">Implementation Experience</h2><p>An experimental, partial implementation of this proposal is available<br>in the main Swift tree behind a set of experimental compiler<br>flags. With these flags, one can see the results of applying this<br>proposal to imported Objective-C APIs (e.g., via the script in<br><code>utils/omit-needless-words.py</code>) and to Swift code itself. The flags<br>are:</p>
<ul>
<li><p><code>-enable-omit-needless-words</code>: this flag enables most of the changes<br>to the Clang importer (bullets 1, 2, 4, and 5 in the prior<br>section). It is currently suitable only for printing the Swift<br>interface to Objective-C modules (e.g., via <code>swift-ide-test</code>).</p>
</li>
<li><p><code>-enable-infer-default-arguments</code>: this flag enables inference of<br>default arguments in the Clang importer (bullet 3 in the prior<br>section).</p>
</li>
<li><p><code>-Womit-needless-words</code>: this flag enables a set of compiler<br>warnings that helps illustrate what Swift code looks like after<br>following the rules described in this proposal. The most important<br>part of each warning is its corresponding Fix-It, which updates the<br>code according to the rules. Tied together with other compiler flags<br>(e.g., <code>-fixit-code</code>, <code>-fixit-all</code>) and a script to collect and apply<br>Fix-Its (in <code>utils/apply-fixit-edits.py</code>), this flag provides a<br>rudimentary migrator that lets us see how Swift code would look<br>under the proposed changes, updating both declarations and use<br>sites. It is currently suitable only for printing the Swift<br>interface to Objective-C modules (e.g., via <code>swift-ide-test</code>).</p>
</li>
</ul>
<p>While the implementation is far from complete, it is enough to see the<br>effects that the proposal has on Objective-C APIs and code that uses<br>them.</p>
<h2 id="Detailed_design">Detailed design</h2><p>This section details the experimental implementation of rules 2-5 in prose. The actual implementation is available in the Swift source tree, mostly in the <code>omitNeedlessWords</code> functions of <a href="https://github.com/apple/swift/blob/master/lib/Basic/StringExtras.cpp" target="_blank" rel="external">lib/Basic/StringExtras.cpp</a>.</p>
<p>The descriptions in this section are described in terms of the incoming Objective-C API. For example, Objective-C method names are “selectors”, e.g., <code>startWithQueue:completionHandler:</code> is a selector with two selector pieces, <code>startWithQueue</code> and <code>completionHandler</code>. A direct mapping of this name into Swift would produce <code>startWithQueue(_:completionHandler:)</code>.</p>
<h3 id="Prune_redundant_type_names">Prune redundant type names</h3><p>Objective-C API names often contain names of parameter and/or result<br>types that would be omitted in a Swift API. The following rules are<br>designed to identify and remove these words. [<a href="https://swift.org/documentation/api-design-guidelines.html#omit-needless-words" target="_blank" rel="external">Omit Needless Words</a>]</p>
<h4 id="Identifying_type_names">Identifying type names</h4><p>The matching process described below searches in a selector piece for<br>a suffix of a string called the <strong>type name</strong>, which is defined as follows:</p>
<ul>
<li><p>For most Objective-C types, the <em>type name</em> is the name under which<br>Swift imports the type, ignoring nullability. For example,</p>
<p>|Objective-C type       | <em>Type Name</em>                                |<br>|———————–|——————————————–|<br>|<code>float</code>                |<code>Float</code>                                     |<br>|<code>nullable NSString</code>    |<code>String</code>                                    |<br>|<code>UIDocument</code>           |<code>UIDocument</code>                                |<br>|<code>nullable UIDocument</code>  |<code>UIDocument</code>                                |<br>|<code>NSInteger</code>            |<code>NSInteger</code>                                 |<br>|<code>NSUInteger</code>           |<code>NSUInteger</code>                                |<br>|<code>CGFloat</code>              |<code>CGFloat</code>                                   |</p>
</li>
<li><p>When the Objective-C type is a block, the <em>type name</em> is “<code>Block</code>.”</p>
</li>
<li><p>When the Objective-C type is a pointer- or reference-to-function,<br>the <em>type name</em> is “<code>Function</code>.”</p>
</li>
<li><p>When the Objective-C type is a typedef other than <code>NSInteger</code>,<br><code>NSUInteger</code>, or <code>CGFloat</code> (which follow the first rule above),<br>the <em>type name</em> is that of the underlying type. For example, when<br>the Objective-C type is <code>UILayoutPriority</code>, which is a typedef for<br><code>float</code>, we try to match the string “<code>Float</code>“. [<a href="https://swift.org/documentation/api-design-guidelines.html#weak-type-information" target="_blank" rel="external">Compensate for Weak Type Information</a>]</p>
</li>
</ul>
<h4 id="Matching">Matching</h4><p>In order to prune a redundant type name from a selector piece, we<br>need to match a substring of the selector that identifies the type.  </p>
<p>A couple of basic rules govern all matches:</p>
<ul>
<li><p><strong>Matches begin and end at word boundaries</strong> in both type names and<br>selector pieces.  Word boundaries occur at the beginning and end of<br>a string, and before every capital letter.</p>
<p>Treating every capital letter as the beginning of a word allows us<br>to match uppercased acronyms without maintaining a special lists of<br>acronyms or prefixes:</p>
<pre>
func documentFor<b>URL</b>(_: NS<b>URL</b>) -> NSDocument?
</pre>

<p> while preventing partial-word mismatches:</p>
 <pre>
 var thumbnailPre<b>view</b> : UI<b>View</b>  // not matched
 </pre>
</li>
<li><p><strong>Matched text extends to the end of the type name</strong>. Because we<br>accept a match for <em>any suffix</em> of the type name, this code:</p>
<pre>
func constraintEqualTo<b>Anchor</b>(anchor: NSLayout<b>Anchor</b>) -&gt; NSLayoutConstraint?
</pre>

<p>can be pruned as follows:</p>
<pre>
func constraintEqualTo(anchor: NSLayoutAnchor) -&gt; NSLayoutConstraint?
</pre>

<p>Conveniently, matching by suffix also means that module prefixes<br>such as <code>NS</code> do not prevent matching or pruning.</p>
</li>
</ul>
<p>Matches are a sequence of one or more of the following:</p>
<ul>
<li><p><strong>Basic matches</strong></p>
<ul>
<li><p>Any substring of the selector piece matches an identical<br>substring of the type name, e.g., <code>String</code> in <code>appendString</code><br>matches <code>String</code> in <code>NSString</code>:</p>
<pre>
func append<b>String</b>(_: NS<b>String</b>)
</pre>
</li>
<li><p><code>Index</code> in the selector piece matches <code>Int</code> in the type name:</p>
<pre>
func characterAt<b>Index</b>(_: <b>Int</b>) -> unichar
</pre>
</li>
</ul>
</li>
<li><p><strong>Collection matches</strong></p>
<ul>
<li><p><code>Indexes</code> or <code>Indices</code> in the selector piece matches <code>IndexSet</code> in<br>the type name:</p>
<pre>
func removeObjectsAt<b>Indexes</b>(_: NS<b>IndexSet</b>)
</pre>
</li>
<li><p>A plural noun in the selector piece matches a collection type name<br>if the noun’s singular form matches the name of the collection’s<br>element type:</p>
</li>
</ul>
<pre>
func arrange<b>Objects</b>(_: <b>[</b>Any<b>Object]</b>) -> [AnyObject]
</pre>
</li>
<li><p><strong>Special suffix matches</strong></p>
<ul>
<li><p>The empty string in the selector piece matches <code>Type</code> or <code>_t</code> in the type name:</p>
<pre>
func writableTypesFor<b>SaveOperation</b>(_: NS<b>SaveOperation</b><i>Type</i>) -> [String]
func objectFor<b>Key</b>(_: <b>Key</b><i>Type</i>) -> AnyObject
func startWith<b>Queue</b>(_: dispatch_<b>queue</b><i>_t</i>, completionHandler: MKMapSnapshotCompletionhandler)
</pre>
</li>
<li><p>The empty string in the selector piece matches <em>one or more digits<br>followed by “D”</em> in the type name:</p>
<pre>
func pointFor<b>Coordinate</b>(_: CLLocation<b>Coordinate</b><i>2D</i>) -> NSPoint
</pre>

</li>
</ul>
</li>
</ul>
<p>In the examples above, the italic text is effectively skipped, so the<br>bold part of the selector piece can be matched and pruned.</p>
<h4 id="Pruning_Restrictions">Pruning Restrictions</h4><p>The following restrictions govern the pruning steps listed in the<br>next section.  If any step would violate one of these rules, it is<br>skipped.</p>
<ul>
<li><p><strong>Never make a selector piece entirely empty</strong>.</p>
</li>
<li><p><strong>Never transform the first selector piece into a Swift keyword</strong>,<br>to avoid forcing the user to escape it with backticks. In Swift, the<br>first Objective-C selector piece becomes:</p>
<ul>
<li>the base name of a method</li>
<li>or the full name of a property </li>
</ul>
<p>neither of which can match a Swift keyword without forcing the<br>user to write backticks.  For example,</p>
<pre>
extension NSParagraphStyle {
&nbsp;&nbsp;class func default<b>ParagraphStyle</b>() -> NS<b>ParagraphStyle</b>
}
let defaultStyle = NSParagraphStyle.<b>default</b>ParagraphStyle()  // OK
</pre>

<p>would become:</p>
<pre>
extension NSParagraphStyle {
&nbsp;&nbsp;class func <b>`default`</b>() -> NSParagraphStyle
}
let defaultStyle = NSParagraphStyle.<b>`default`</b>()              // Awkward
</pre>

<p>By contrast, later selector pieces become argument labels, which<br>are allowed to match Swift keywords without requiring backticks:</p>
<pre>
receiver.handle(someMessage, <b>for</b>: somebody)  // OK
</pre>
</li>
<li><p><strong>Never transform a name into “get”, “set”, “with”, “for”, or<br>“using”</strong>, just to avoid creating absurdly vacuous names.</p>
</li>
<li><p><strong>Never prune a suffix from a parameter introducer unless the suffix<br>is immediately preceded by a preposition, verb, or gerund</strong>.</p>
</li>
</ul>
<p>  This heuristic has the effect of preventing us from breaking up<br>  sequences of nouns that refer to a parameter.  Dropping just the<br>  suffix of a noun phrase tends to imply something unintended about<br>  the parameter that follows.  For example,</p>
  <pre>
func setText<b>Color</b>(_: UI<b>Color</b>)
...
button.<b>setTextColor</b>(.red())  <b>// clear</b>
</pre>

<p>  If we were to drop <code>Color</code>, leaving just <code>Text</code>, call sites<br>  would become confusing:</p>
  <pre>
func setText(_: UIColor)
...
button.<b>setText</b>(.red())      <b>// appears to be setting the text!</b>
</pre>

<p>  Note: We don’t maintain a list of nouns, but if we did, this<br>  rule could be more simply phrased as “don’t prune a suffix<br>  leaving a trailing noun before a parameter”.</p>
<ul>
<li><p><strong>Never prune a suffix from the base name of a method that matches a property of the enclosing class</strong>: </p>
<p>This heuristic has the effect of preventing us from producing<br>too-generic names for methods that conceptually modify a property<br>of the classs.</p>
<pre>
var <b>gestureRecognizers</b>: [UIGestureRecognizer]
func add<b>GestureRecognizer</b>(_: UI<b>GestureRecognizer</b>)
</pre>

<p>If we were to drop <code>GestureRecognizer</code>, leaving just <code>add</code>, we end<br>up with a method that conceptually modifies the<br><code>gestureRecognizers</code> property but uses an overly generic name to<br>do so:</p>
<pre>
var gestureRecognizers: [UIGestureRecognizer]
func add(_: UIGestureRecognizer) <b>// should indicate that we're adding to the property</b>
</pre>

</li>
</ul>
<h4 id="Pruning_Steps">Pruning Steps</h4><p>The following pruning steps are performed in the order<br>shown:</p>
<ol>
<li><p><strong>Prune the result type from the head of type-preserving<br>transforms</strong>.  Specifically, when</p>
<ul>
<li>the receiver type is the same as the result type</li>
<li>and the type name is matched at the head of the first selector piece</li>
<li>and the match is followed by a preposition</li>
</ul>
<p>then prune the match.</p>
<p>You can think of the affected operations as properties or<br>non-mutating methods that produce a transformed version of the<br>receiver.  For example:</p>
<pre>
extension NS<b>Color</b> {
&nbsp;&nbsp;func <b>color</b><i>With</i>AlphaComponent(_: CGFloat) -> NS<b>Color</b>
}
let translucentForeground = <b>foregroundColor.color</b><i>With</i>AlphaComponent(0.5)
</pre>

<p>becomes:</p>
<pre>
extension NS<b>Color</b> {
&nbsp;&nbsp;func <i>with</i>AlphaComponent(_: CGFloat) -> NS<b>Color</b>
}
let translucentForeground = <b>foregroundColor</b>.<i>with</i>AlphaComponent(0.5)
</pre>
</li>
<li><p><strong>Prune an additional hanging “By”</strong>. Specifically, if</p>
<ul>
<li>anything was pruned in step 1</li>
<li>and the remaining selector piece begins with “<code>By</code>“ <em>followed by a gerund</em>,</li>
</ul>
<p>then prune the initial “<code>By</code>“ as well.</p>
<p>This heuristic allows us to arrive at usage of the form <code>a =
b.frobnicating(c)</code>.  For example:</p>
<pre>
extension NSString {
&nbsp;&nbsp;func string<b>By</b><i>Applying</i>Transform(_: NSString, reverse: Bool) -> NSString?
}
let sanitizedInput = rawInput.<b>stringByApplyingTransform</b>(NSStringTransformToXMLHex, reverse: false)
</pre>

<p>becomes:</p>
<pre>
extension NSString {
&nbsp;&nbsp;func applyingTransform(_: NSString, reverse: Bool) -> NString?
}
let sanitizedInput = rawInput.<b>applyingTransform</b>(NSStringTransformToXMLHex, reverse: false)
</pre>
</li>
<li><p><strong>Prune a match for any type name in the signature from the tail of<br>the preceding selector piece</strong>. Specifically,</p>
<p>|From the tail of:                               |Prune a match for:              |<br>|————————————————|——————————–|<br>|a selector piece that introduces a parameter    |the parameter type name         |<br>|the name of a property                          |the property type name          |<br>|the name of a zero-argument method              |the return type name            |</p>
<p>For example,</p>
<pre>
extension NSDocumentController {
&nbsp;&nbsp;func documentFor<b>URL</b>(_ url: NS<b>URL</b>) -> NSDocument? // parameter introducer
}
extension NSManagedObjectContext {
&nbsp;&nbsp;var parent<b>Context</b>: NSManagedObject<b>Context</b>?       // property
}
extension UIColor {
&nbsp;&nbsp;class func darkGray<b>Color</b>() -> UI<b>Color</b>            // zero-argument method
}
...
myDocument = self.documentFor<b>URL</b>(locationOfFile)
if self.managedObjectContext.parent<b>Context</b> != changedContext { return }
foregroundColor = .darkGray<b>Color</b>()
</pre>

<p>becomes:</p>
<pre>
extension NSDocumentController {
&nbsp;&nbsp;func documentFor(_ url: NSURL) -> NSDocument?
}
extension NSManagedObjectContext {
&nbsp;&nbsp;var parent : NSManagedObjectContext?
}
extension UIColor {
&nbsp;&nbsp;class func darkGray() -> UIColor
}
...
myDocument = self.<b>documentFor</b>(locationOfFile)
if self.managedObjectContext.<b>parent</b> != changedContext { return }
foregroundColor = .<b>darkGray</b>()
</pre>

</li>
</ol>
<h5 id="Why_Does_Order_Matter?">Why Does Order Matter?</h5><p>Some steps below prune matches from the head of the first selector<br>piece, and some prune from the tail.  When <code>pruning restrictions</code>_<br>prevent both the head and tail from being pruned, prioritizing<br>head-pruning steps can keep method families together.  For example,<br>in NSFontDescriptor:</p>
<pre><code><span class="func"><span class="keyword">func</span> <span class="title">fontDescriptorWithSymbolicTraits</span><span class="params">(<span class="number">_</span>: NSFontSymbolicTraits)</span></span> -&gt; <span class="type">NSFontDescriptor</span>
<span class="func"><span class="keyword">func</span> <span class="title">fontDescriptorWithSize</span><span class="params">(<span class="number">_</span>: CGFloat)</span></span> -&gt; <span class="type">UIFontDescriptor</span>
<span class="func"><span class="keyword">func</span> <span class="title">fontDescriptorWithMatrix</span><span class="params">(<span class="number">_</span>: CGAffineTransform)</span></span> -&gt;  <span class="type">UIFontDescriptor</span>
...
</code></pre><p>becomes:</p>
<pre>
func <b>with</b>SymbolicTraits(_: UIFontDescriptorSymbolicTraits) ->  UIFontDescriptor
func <b>with</b>Size(_: CGFloat) -> UIFontDescriptor
func <b>with</b>Matrix(_: CGAffineTransform) -> UIFontDescriptor
...
</pre>

<p>If we instead began by pruning <code>SymbolicTraits</code> from the tail of<br>the first method name, the prohibition against creating <code>absurdly
vacuous names</code>_ would prevent us from pruning “<code>fontDescriptorWith</code>“<br>down to “<code>with</code>“, resulting in:</p>
<pre>
func <b>fontDescriptorWith</b>(_: NSFontSymbolicTraits) -> NSFontDescriptor // inconsistent
func withSize(_: CGFloat) -> UIFontDescriptor
func withMatrix(_: CGAffineTransform) -> UIFontDescriptor
...
</pre>


<h4 id="Add_Default_Arguments">Add Default Arguments</h4><p>For any method that is not a single-parameter setter, default<br>arguments are added to parameters in the following cases:</p>
<ul>
<li><p><strong>Nullable trailing closure parameters</strong> are given a default value of <code>nil</code>.</p>
</li>
<li><p><strong>Nullable NSZone parameters</strong> are given a default value of <code>nil</code>. Zones are essentially unused in Swift and should always be <code>nil</code>.</p>
</li>
<li><p><strong>Option set types</strong> whose type name contain the word “Options” are given a default value of <code>[]</code> (the empty option set).</p>
</li>
</ul>
<p>Together, these heuristics allow code like:</p>
<pre>
rootViewController.presentViewController(alert, animated: true<b>, completion: nil</b>)
UIView.animateWithDuration(
  0.2, delay: 0.0, <b>options: [],</b> animations: { self.logo.alpha = 0.0 }) { 
    _ in self.logo.hidden = true 
}
</pre>

<p>to become:</p>
<pre><code>rootViewController.present(alert, <span class="string">animated:</span> <span class="literal">true</span>)
UIView.animateWithDuration(
  <span class="number">0.2</span>, <span class="string">delay:</span> <span class="number">0.0</span>, <span class="string">animations:</span> { self.logo.alpha = <span class="number">0.0</span> }) { _ <span class="keyword">in</span> self.logo.hidden = <span class="literal">true</span> }
</code></pre><h4 id="Add_First_Argument_Labels">Add First Argument Labels</h4><p>When the first parameter of a method is defaulted, <strong>split the first<br>selector piece if it contains a preposition</strong>, turning everything<br>starting with the last preposition into a <em>required</em> label for the<br>first argument. If the generated first argument label starts with the<br>word “with”, drop the “with”.</p>
<p>This heuristic eliminates words that refer only to the first<br>argument from call sites where the argument’s default value is<br>used. For example, instead of:</p>
<pre>
extension NSArray {
  func enumerateObjects<b>With</b>(_: NSEnumerationOptions <b>= []</b>, using: (AnyObject, UnsafeMutablePointer<objcbool>) -> Void)
}

array.enumerateObjects<b>With</b>(.Reverse) { // OK
 // ..
}

array.enumerateObjects<b>With</b>() {         // ?? With what?
 // ..
}
</objcbool></pre>

<p>we get:</p>
<pre>
extension NSArray {
  func enumerateObjects(<b>options</b> _: NSEnumerationOptions <b>= []</b>, using: (AnyObject, UnsafeMutablePointer<objcbool>) -> Void)
}

array.enumerateObjects(<b>options:</b> .Reverse) { // OK
 // ..
}

array.enumerateObjects() {               // OK
 // ..
}
</objcbool></pre>

<h4 id="Prepend_“is”_to_Boolean_Properties">Prepend “is” to Boolean Properties</h4><p><strong>Unless the name of a Boolean property contains</strong></p>
<ul>
<li><p><strong>an auxiliary verb</strong> such as “is”, “has”, “may”, “should”, or<br>“will”</p>
</li>
<li><p><strong>or, a word ending in “s”</strong> , indicating either a plural (for which<br>prepending “is” would be incorrect) or a verb in the continuous<br>tense (which indicates its Boolean nature, e.g., “translates” in<br>“<code>translatesCoordinates</code>“)</p>
</li>
</ul>
<p><strong>prepend “is” to its name</strong>.</p>
<p>For example:</p>
<pre><code>extension NSBezierPath {
  <span class="keyword">var</span> <span class="keyword">empty</span>: <span class="keyword">Bool</span>
}

<span class="keyword">if</span> path.<span class="keyword">empty</span> { ... }
</code></pre><p>will become</p>
<pre>
extension NSBezierPath {
  var <b>isEmpty</b>: Bool
}

if path.<b>isEmpty</b> { ... }
</pre>

<h3 id="Stripping_the_“NS”_Prefix">Stripping the “NS” Prefix</h3><p>The removal of the “NS” prefix for the Foundation module (or other<br>specifically identified modules) is a mechanical translation for all<br>global symbols defined within that module that can be performed in the<br>Clang importer. Note that this removal can create conflicts with the<br>standard library. For example, <code>NSString</code> and <code>NSArray</code> will become<br><code>String</code> and <code>Array</code>, respectively, and Foundation’s versions will<br>shadow the standard library’s versions. We are investigating several<br>ways to address this problem, including:</p>
<ul>
<li><p>Retain the <code>NS</code> prefix on such classes.</p>
</li>
<li><p>Introduce some notion of submodules into Swift, so that these<br>classes would exist in a submodule for reference-semantic types<br>(e.g., one would refer to <code>Foundation.ReferenceTypes.Array</code> or similar).</p>
</li>
</ul>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>The proposed changes are massively source-breaking for Swift code that<br>makes use of Objective-C frameworks, and will require a migrator to<br>translate Swift 2 code into Swift 3 code. The <code>-Womit-needless-words</code><br>flag described in the <a href="#implementation-experience">Implementation<br>Experience</a> section can provide the basics<br>for such a migrator. Additionally, the compiler needs to provide good<br>error messages (with Fix-Its) for Swift code that refers to the old<br>(pre-transformed) Objective-C names, which could be achieved with some<br>combination of the Fix-Its described previously and a secondary name<br>lookup mechanism retaining the old names.</p>
<h2 id="Acknowledgments">Acknowledgments</h2><p>The automatic translation described in this proposal has been<br>developed as part of the effort to produce the <a href="https://swift.org/documentation/api-design-guidelines.html" title="API Design Guidelines" target="_blank" rel="external">Swift API Design<br>Guidelines</a> with Dmitri Hrybenko, Ted Kremenek,<br>Chris Lattner, Alex Migicovsky, Max Moiseev, Ali Ozer, and Tony Parker.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Better_Translation_of_Objective-C_APIs_Into_Swift">Better Translation of Objective-C APIs Into Swift</h1><ul>
<li>Proposal: <a href=]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0006-apply-api-guidelines-to-the-standard-library]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0006-apply-api-guidelines-to-the-standard-library/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0006-apply-api-guidelines-to-the-standard-library/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:45:55.530Z</updated>
    <content type="html"><![CDATA[<h1 id="Apply_API_Guidelines_to_the_Standard_Library">Apply API Guidelines to the Standard Library</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md" target="_blank" rel="external">SE-0006</a></li>
<li>Author(s): <a href="https://github.com/dabrahams" target="_blank" rel="external">Dave Abrahams</a>, <a href="https://github.com/gribozavr" target="_blank" rel="external">Dmitri Gribenko</a>, <a href="https://github.com/moiseev" target="_blank" rel="external">Maxim Moiseev</a></li>
<li>Status: <strong>Awaiting Review</strong></li>
<li>Review manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p><a href="https://swift.org/documentation/api-design-guidelines.html" title="API Design Guidelines" target="_blank" rel="external">Swift API Design Guidelines</a> being developed as<br>part of Swift 3.  It is important that the Standard Library is an exemplar of<br>Swift API Design Guidelines: the APIs from the Standard Library are, probably,<br>the most frequently used Swift APIs in any application domain; the Standard<br>Library also sets precedent for other libraries.</p>
<p>In this project, we are reviewing the entire Standard Library and updating it<br>to follow the guidelines.</p>
<h2 id="Proposed_solution">Proposed solution</h2><p>The actual work is being performed on the <a href="https://github.com/apple/swift/tree/swift-3-api-guidelines" title="Swift 3 API Design Guidelines preview" target="_blank" rel="external">swift-3-api-guidelines<br>branch</a> of the <a href="https://github.com/apple/swift" title="Swift repository" target="_blank" rel="external">Swift repository</a>.<br>On high level, the changes can be summarized as follows.</p>
<ul>
<li><p>Strip <code>Type</code> suffix from remaining protocol names.  In a few special cases<br>this means adding a <code>Protocol</code> suffix to get out of the way of type<br>names that are primary (though most of these we expect to be<br>obsoleted by Swift 3 language features).</p>
</li>
<li><p>The concept of <code>generator</code> is renamed to <code>iterator</code>.</p>
</li>
<li><p><code>IndexingGenerator</code> is renamed to <code>DefaultCollectionIterator</code>.</p>
</li>
</ul>
<p><strong>More changes will be summarized here as they are implemented.</strong></p>
<h2 id="API_diffs">API diffs</h2><p>Differences between Swift 2.2 Standard library API and the proposed API are<br>added to this section as they are being implemented on the<br><a href="https://github.com/apple/swift/tree/swift-3-api-guidelines" title="Swift 3 API Design Guidelines preview" target="_blank" rel="external">swift-3-api-guidelines branch</a>.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>The proposed changes are massively source-breaking for Swift code, and will<br>require a migrator to translate Swift 2 code into Swift 3 code.  The API diffs<br>from this proposal will be the primary source of the information about the<br>required transformations.  In addition, to the extent the language allows, the<br>library will keep old names as unavailable symbols with a <code>renamed</code> annotation,<br>that allows the compiler to produce good error messages and emit Fix-Its.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Apply_API_Guidelines_to_the_Standard_Library">Apply API Guidelines to the Standard Library</h1><ul>
<li>Proposal: <a href="https://g]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0007-remove-c-style-for-loops]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0007-remove-c-style-for-loops/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0007-remove-c-style-for-loops/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:46:09.403Z</updated>
    <content type="html"><![CDATA[<h1 id="Remove_C-style_for-loops_with_conditions_and_incrementers">Remove C-style for-loops with conditions and incrementers</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md" target="_blank" rel="external">SE-0007</a></li>
<li>Author(s): <a href="https://github.com/erica" target="_blank" rel="external">Erica Sadun</a></li>
<li>Status: <strong>Accepted</strong> for Swift 3.0 (<a href="https://bugs.swift.org/browse/SR-226" target="_blank" rel="external">Swift 2.2 bug</a>, <a href="https://bugs.swift.org/browse/SR-227" target="_blank" rel="external">Swift 3.0 bug</a>)</li>
<li>Review manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>The C-style <code>for-loop</code> appears to be a mechanical carry-over from C rather than a<br>genuinely Swift-specific construct. It is rarely used and not very Swift-like. </p>
<p>More Swift-typical construction is already available with <code>for-in</code><br>statements and <code>stride</code>. Removing for loops would simplify the language and starve the<br>most common use-points for <code>--</code> and <code>++</code>, which are already due to be eliminated from the<br>language.</p>
<p>The value of this construct is limited and I believe its removal should be seriously considered.</p>
<h2 id="Advantages_of_For_Loops">Advantages of For Loops</h2><p>Swift design supported a shallow learning curve using familiar constants and control<br>structures. The <code>for-loop</code> mimics C and limits the effort needed to master this control flow.</p>
<h2 id="Disadvantages_of_For_Loops">Disadvantages of For Loops</h2><ol>
<li>Both <code>for-in</code> and <code>stride</code> provide equivalent behavior using Swift-coherent approaches<br>without being tied to legacy terminology. </li>
<li>There is a distinct expressive disadvantage in using <code>for-loops</code> compared to <code>for-in</code><br>in succinctness</li>
<li><code>for-loop</code> implementations do not lend themselves to use with collections and other core Swift types.</li>
<li>The <code>for-loop</code> encourages use of unary incrementors and decrementors, which will be<br>soon removed from the language.</li>
<li>The semi-colon delimited declaration offers a steep learning curve from users arriving<br>from non C-like languages</li>
<li>If the <code>for-loop</code> did not exist, I doubt it would be considered for inclusion in Swift 3.</li>
</ol>
<h2 id="Proposed_Approach">Proposed Approach</h2><p>I suggest that the for-loop be deprecated in Swift 2.x and removed entirely in Swift 3, with coverage removed from the Swift Programming Language to match the revisions in the current 2.2 update.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>Not removing <code>for-loop</code> from Swift, losing the opportunity to streamline the language<br>and discard an unneeded control flow item.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>A search of the Apple Swift codebase suggests this feature is rarely used. Community members of the Swift-Evolution mail list confirm that it does not feature in many pro-level apps and can be worked around for those few times when <code>for-loop</code>s do pop up. For example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char *blk_xor(char *dst, const char *src, size_t len)</span><br><span class="line">&#123;</span><br><span class="line"> const char *sp = src;</span><br><span class="line"> <span class="keyword">for</span> (char *dp = dst; sp - src &lt; len; sp++, dp++)</span><br><span class="line">   *dp ^= *sp;</span><br><span class="line"> <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>versus</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">blk_xor</span><span class="params">(dst: UnsafeMutablePointer&lt;CChar&gt;, src:</span><br><span class="line">UnsafePointer&lt;CChar&gt;, len: Int)</span></span> -&gt; <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CChar</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;len &#123;</span><br><span class="line">       dst[i] ^= src[i]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dst</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A search of github’s Swift gists suggests the approach is used primarily by those new to the language with minimal language skills and is abandoned as language mastery is achieved.</p>
<p>For example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; array.<span class="built_in">count</span> ;i++)&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"array[i] <span class="subst">\(array[i])</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Community_Responses">Community Responses</h2><ul>
<li>“I am certainly open to considering dropping the C-style for loop.  IMO, it is a rarely used feature of Swift that doesn’t carry its weight.  Many of the reasons to remove them align with the rationale for removing – and ++. “ – Chris Lattner, clattner@apple.com</li>
<li>“My intuition <em>completely</em> agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I’d like to see is how often C-style for loops are actually used in Swift. It’s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it’s a good candidate for removal.” – Douglas Gregnor, dgregor@apple.com</li>
<li>“Every time I’ve used a C-style for loop in Swift it was because I forgot that .indices existed. If it’s removed, a fixme pointing that direction might be useful.” – David Smith, david_smith@apple.com</li>
<li>“For what it’s worth we don’t have a single C style for loop in the Lyft codebase.” – Keith Smiley, keithbsmiley@gmail.com</li>
<li>“Just checked; ditto Khan Academy.” – Andy Matsuchak, andy@andymatuschak.org</li>
<li>“We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.” – Eric Chamberlain, eric.chamberlain@arctouch.com</li>
<li>“Every time I’ve tried to use a C-style for loop, I’ve ended up switching to a while loop because my iteration variable ended up having the wrong type (e.g. having an optional type when the value must be non-optional for the body to execute). The Postmates codebase contains no instances of C-style for loops in Swift.” – Kevin Ballard, kevin@sb.org</li>
<li>“I found a couple of cases of them in my codebase, but they were trivially transformed into “proper” Swift-style for loops that look better anyway. If it were a vote, I’d vote for eliminating C-style.” – Sean Heber, sean@fifthace.com</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Remove_C-style_for-loops_with_conditions_and_incrementers">Remove C-style for-loops with conditions and incrementers</h1><ul>
<li>Pr]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0008-lazy-flatmap-for-optionals]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0008-lazy-flatmap-for-optionals/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0008-lazy-flatmap-for-optionals/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:46:19.788Z</updated>
    <content type="html"><![CDATA[<h1 id="Add_a_Lazy_flatMap_for_Sequences_of_Optionals">Add a Lazy flatMap for Sequences of Optionals</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md" target="_blank" rel="external">SE-0008</a></li>
<li>Author(s): <a href="https://github.com/oisdk" target="_blank" rel="external">Oisin Kidney</a></li>
<li>Status: <strong>Awaiting review</strong> (scheduled for December 15–17, 2015)</li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>Currently, the Swift standard library has two versions of <code>flatMap</code>. One which flattens a sequence of sequences after a transformation:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  .flatMap &#123; n <span class="keyword">in</span> n..&lt;<span class="number">5</span> &#125; </span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 2, 3, 4, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>And another which flattens a sequence of <code>Optional</code>s:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>...<span class="number">10</span>)</span><br><span class="line">  .flatMap &#123; n <span class="keyword">in</span> n % <span class="number">2</span> == <span class="number">0</span> ? n/<span class="number">2</span> : <span class="literal">nil</span> &#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>However, there is only a lazy implementation for the first version:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  .lazy</span><br><span class="line">  .flatMap &#123; n <span class="keyword">in</span> n..&lt;<span class="number">5</span> &#125;</span><br><span class="line"><span class="comment">// LazyCollection&lt;FlattenBidirectionalCollection&lt;LazyMapCollection&lt;Array&lt;Int&gt;, Range&lt;Int&gt;&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>...<span class="number">10</span>)</span><br><span class="line">  .lazy</span><br><span class="line">  .flatMap &#123; n <span class="keyword">in</span> n % <span class="number">2</span> == <span class="number">0</span> ? n/<span class="number">2</span> : <span class="literal">nil</span> &#125;</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="Motivation">Motivation</h2><p>Seeing as the already-existing <code>flatMap</code> has a lazy version for nested sequences, a missing lazy version for sequences of <code>Optional</code>s seems like a gap. The usefulness of lazy sequences is well documented, especially when refactoring imperative nested for-loops into chains of methods, which can unnecessarily allocate intermediate arrays if done eagerly.</p>
<h2 id="Proposed_Approach">Proposed Approach</h2><p>Making use of already-existing types in the standard library, <code>flatMap</code>‘s functionality can be achieved with a <code>map</code>-<code>filter</code>-<code>map</code> chain:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LazySequenceType</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  @warn_unused_result</span><br><span class="line">  public <span class="func"><span class="keyword">func</span> <span class="title">flatMap</span><span class="generics">&lt;T&gt;</span><span class="params">(transform: Elements.Generator.Element -&gt; T?)</span></span></span><br><span class="line">    -&gt; <span class="type">LazyMapSequence</span>&lt;<span class="type">LazyFilterSequence</span>&lt;<span class="type">LazyMapSequence</span>&lt;<span class="type">Elements</span>, <span class="type">T</span>?&gt;&gt;, <span class="type">T</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        .<span class="built_in">map</span>(transform)</span><br><span class="line">        .<span class="built_in">filter</span> &#123; opt <span class="keyword">in</span> opt != <span class="literal">nil</span> &#125;</span><br><span class="line">        .<span class="built_in">map</span> &#123; notNil <span class="keyword">in</span> notNil! &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Detailed_Design">Detailed Design</h2><p>A version for <code>LazyCollectionType</code>s is almost identical:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LazyCollectionType</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  @warn_unused_result</span><br><span class="line">  public <span class="func"><span class="keyword">func</span> <span class="title">flatMap</span><span class="generics">&lt;T&gt;</span><span class="params">(transform: Elements.Generator.Element -&gt; T?)</span></span></span><br><span class="line">    -&gt; <span class="type">LazyMapCollection</span>&lt;<span class="type">LazyFilterCollection</span>&lt;<span class="type">LazyMapCollection</span>&lt;<span class="type">Elements</span>, <span class="type">T</span>?&gt;&gt;, <span class="type">T</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        .<span class="built_in">map</span>(transform)</span><br><span class="line">        .<span class="built_in">filter</span> &#123; opt <span class="keyword">in</span> opt != <span class="literal">nil</span> &#125;</span><br><span class="line">        .<span class="built_in">map</span> &#123; notNil <span class="keyword">in</span> notNil! &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, a “bidirectional” version cannot be written in this way, since no <code>FilterBidirectionalCollection</code> exists.</p>
<p>The other form of <code>flatMap</code> uses a <code>flatten</code> method on nested sequences, which has both a <code>CollectionType</code> form and a form for <code>CollectionType</code>s with <code>BidirectionalIndexType</code>s. </p>
<p>However, Swift’s current type system doesn’t allow a similar method to be defined on sequences of <code>Optional</code>s. This means we have to rely on <code>filter</code>, which only has a <code>SequenceType</code> and <code>CollectionType</code> implementation.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><h2 id="Alternatives_considered">Alternatives considered</h2><h3 id="Custom_struct">Custom struct</h3><p>It would also be possible to add a new struct, and a method on <code>LazySequenceType</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">FlatMapOptionalGenerator</span>&lt;<span class="title">G</span>: <span class="title">GeneratorType</span>, <span class="title">Element</span>&gt;: <span class="title">GeneratorType</span> </span>&#123;</span><br><span class="line">  private <span class="keyword">let</span> transform: <span class="type">G</span>.<span class="type">Element</span> -&gt; <span class="type">Element</span>?</span><br><span class="line">  private <span class="keyword">var</span> generator: <span class="type">G</span></span><br><span class="line">  public <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> next = generator.next() &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> transformed = transform(next) &#123;</span><br><span class="line">        <span class="keyword">return</span> transformed</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">FlatMapOptionalSequence</span>&lt;<span class="title">S</span>: <span class="title">LazySequenceType</span>, <span class="title">Element</span>&gt;: <span class="title">LazySequenceType</span> </span>&#123;</span><br><span class="line">  private <span class="keyword">let</span> transform: <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> -&gt; <span class="type">Element</span>?</span><br><span class="line">  private <span class="keyword">let</span> sequence: <span class="type">S</span></span><br><span class="line">  public <span class="func"><span class="keyword">func</span> <span class="title">generate</span><span class="params">()</span></span> -&gt; <span class="type">FlatMapOptionalGenerator</span>&lt;<span class="type">S</span>.<span class="type">Generator</span>, <span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">FlatMapOptionalGenerator</span>(transform: transform, generator: sequence.generate())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LazySequenceType</span> </span>&#123;</span><br><span class="line">  public <span class="func"><span class="keyword">func</span> <span class="title">flatMap</span><span class="generics">&lt;T&gt;</span><span class="params">(transform: Generator.Element -&gt; T?)</span></span> -&gt; <span class="type">FlatMapOptionalSequence</span>&lt;<span class="type">Self</span>, <span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">FlatMapOptionalSequence</span>(transform: transform, sequence: <span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, this implementation does not have a <code>LazyCollectionType</code> version. To add one, and a bidirectional implementation, six new types (three <code>SequenceType</code>s, three <code>GeneratorType</code>s) would have to be added to the standard library. </p>
<h3 id="New_Filter_struct">New Filter struct</h3><p>This would involve adding a <code>FilterBidirectionalCollection</code> to the standard library. Arguably, this is a gap currently. It would allow both <code>flatMap</code> versions to mirror each other, with minimal new types.</p>
<h3 id="Make_Optional_Conform_to_SequenceType">Make Optional Conform to SequenceType</h3><p>This is a far-reaching, separate proposal, but it would solve the issue that this proposal seeks to solve. It’s worth bearing in mind, though, that <code>Optional</code> <em>probably</em> wouldn’t have a <code>BidirectionalIndexType</code>, so the bidirectional version of <code>flatMap</code> wouldn’t exist on <code>Optional</code>s, anyway.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Add_a_Lazy_flatMap_for_Sequences_of_Optionals">Add a Lazy flatMap for Sequences of Optionals</h1><ul>
<li>Proposal: <a href="https:/]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0009-require-self-for-accessing-instance-members]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0009-require-self-for-accessing-instance-members/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0009-require-self-for-accessing-instance-members/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:46:28.889Z</updated>
    <content type="html"><![CDATA[<h1 id="Require_self_for_accessing_instance_members">Require self for accessing instance members</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md" target="_blank" rel="external">SE-0009</a></li>
<li>Author(s): <a href="https://github.com/hartbit" target="_blank" rel="external">David Hart</a></li>
<li>Status: <strong>Awaiting review</strong> (scheduled for December 16–20, 2015)</li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>The current version of Swift (2.1) requires using <code>self</code> when accessing instance members in closures. The proposal suggests extending this to all member accesses (as is intrinsically the case in Objective-C). It has the benefit of documenting instance properties vs local variables and instance functions vs local functions or closures.</p>
<h2 id="Motivation">Motivation</h2><p>This proposal makes it obvious which are instance properties vs local variables, as well as which are instance functions vs local functions/closures. This has several advantages:</p>
<ul>
<li>More readable at the point of use. </li>
<li>More consistent than only requiring <code>self</code> in closure contexts.</li>
<li>Less confusing from a learning point of view.</li>
<li>Lets the compiler warn users (and avoids bugs) where the authors mean to use a local variable but instead are unknowingly using an instance property (and the other way round).</li>
</ul>
<p>One example of a bug avoidable by the proposal (<a href="https://lists.swift.org/pipermail/swift-evolution/2015-December/000243.html" target="_blank" rel="external">provided by Rudolf Adamkovic</a>):</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">	<span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> button: <span class="type">UIButton</span>!</span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"David"</span></span><br><span class="line"></span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">updateButton</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// var title = "Hello \(name)"</span></span><br><span class="line">		button.setTitle(title, forState: .<span class="type">Normal</span>) <span class="comment">// forgot to comment this line but the compiler does not complain and title is now referencing UIViewController’s title by mistake</span></span><br><span class="line">		button.setTitleColor(<span class="type">UIColor</span>.blackColor(), forState: .<span class="type">Normal</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The API Design Guidelines are meant for writing APIs but I still think they represent fundamentals of Swift. The two first points are:</p>
<ul>
<li>Clarity at the point of use is your most important goal. Code is read far more than it is written.</li>
<li>Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.</li>
</ul>
<p>And I believe that the proposition is directly in line with those objectives.</p>
<h2 id="Counter-argument">Counter-argument</h2><p>The counter-argument brought up by two members of the community is that the current behaviour “makes the capturing semantics of self stand out more in closures”. While this is true, the author finds its usefulness lacking.</p>
<p>In the following lines of code, we know without a shadow of a doubt that <code>foobar</code> is a throwing function and that <code>barfoo</code> does not throw.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">try foobar()</span><br><span class="line">barfoo()</span><br></pre></td></tr></table></figure>
<p>But with an example of <code>self</code> in a closure:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foobar(&#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="keyword">self</span>.description)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The <code>self</code> keyword in the previous lines of code gives a hint but does not bring any certitudes:</p>
<ul>
<li><code>self</code> might have been forced by the compiler to hint at possible memory issues,</li>
<li><code>self</code> might have been a programmer choice if the closure is non-escaping.</li>
</ul>
<p>And in the reverse example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">barfoo(&#123;</span><br><span class="line">	<span class="built_in">print</span>(description)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>the closure might be non-escaping,</li>
<li>the <code>description</code> might be referring to a local variable (which we missed the declaration of) shadowing the instance property in an escaping closure.</li>
</ul>
<p>In both of these examples, the <code>self</code> keyword does not tell us with any certainty that we should or not be careful about reference cycle issues without checking the signature of the called function, only that self is captured. With the proposition, <code>self</code> gets some meaning back: it indicates which are local and which are instance properties.</p>
<h2 id="Proposed_Solution">Proposed Solution</h2><p>I suggest that not using <code>self</code> for accessing instance properties and functions is applied in two stages. In Swift 2.x, it could start as a warning and Xcode could provide a Fix-It. Then, it could become a compiler error in Swift 3 and the migrator would help transition code over.</p>
<p>The following code which used to compile would generate an error at the documented lines:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"David"</span></span><br><span class="line">	</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">"Hello <span class="subst">\(name)</span>"</span>) <span class="comment">// would not compile</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">		foo() <span class="comment">// would not compile</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code would have to be modified as so to compile correctly:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"David"</span></span><br><span class="line">	</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">"Hello <span class="subst">\(<span class="keyword">self</span>.name)</span>"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">self</span>.foo()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>A lot of code written since the original change would be impacted by this proposal, but it seems like it can be easily fixed by both the migrator tool and an Xcode Fix-It.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>The alternative is to keep the current behaviour, but it has the aforementioned disadvantages.</p>
<p>An alternative would be to demote from a compiler error to a warning.</p>
<h2 id="Community_Responses">Community Responses</h2><ul>
<li>“I actually encountered at least two bugs in my app introduced by this implicit “self” behavior. It can be dangerous and hard to track down.” – Rudolf Adamkovic, salutis@me.com</li>
<li>“Given this, some teams use underscores for their iVars which is very unfortunate. Myself, I use self whenever possible to be explicit. I’d like the language to force us to be clear.” – Dan, robear18@gmail.com</li>
<li>“I’m not sure how many Swift users this effects, but I’m colorblind and I really struggle with the local vs properties syntax coloring.” – Tyler Cloutier, cloutiertyler@aol.com</li>
<li>“+1 I’ve had a lot of weird things happen that I’ve traced to mistakes in properties having the same name as function arguments. I’ve hardly ever had this issue in modern Obj-C.” – Coli Cornaby, colin.cornaby@mac.com</li>
<li>“Teaching wise, its much less confusing for self to be required so students don’t mix up instance properties and local vars. Especially when self is required in closures, it confuses students. If self is mandatory for all instance properties, it would be so much clearer and much easier to read.” – Yichen Cao, ycao@me.com</li>
<li>“this avoids confusion, maintains a consistent language approach, and thus helps reducing bugs. Sure, it might lead to less poetic haiku code, but that is not necessarily a bad thing in medium to large scale software products with more than one person working on it and possible/eventual change of people on the project over time.” – Panajev</li>
<li>“I’m +1 on this, for the reasons already stated by others, but not as strongly as I was a year ago. I was very worried about this with Swift 1 was first released, but since then, I haven’t actually made this mistake, possibly because I’m so paranoid about it.” – Michael Buckley, michael@buckleyisms.com</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Require_self_for_accessing_instance_members">Require self for accessing instance members</h1><ul>
<li>Proposal: <a href="https://git]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0010-add-staticstring-unicodescalarview]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0010-add-staticstring-unicodescalarview/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0010-add-staticstring-unicodescalarview/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:46:39.283Z</updated>
    <content type="html"><![CDATA[<h1 id="Add_StaticString-UnicodeScalarView">Add StaticString.UnicodeScalarView</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0010-add-staticstring-unicodescalarview.md" target="_blank" rel="external">SE-0010</a></li>
<li>Author: <a href="https://github.com/kballard" target="_blank" rel="external">Kevin Ballard</a></li>
<li>Status: <strong>Awaiting review</strong></li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>There is no way to create a substring of a <code>StaticString</code> that is still typed<br>as <code>StaticString</code>. There should be.</p>
<h2 id="Motivation">Motivation</h2><p>It is occasionally useful to be able to produce a substring of a <code>StaticString</code><br>that can be passed to APIs expecting a <code>StaticString</code>. For example, extracting<br>the filename from <code>__FILE__</code>. But there is no way to do this today, as<br><code>StaticString</code> does not provide any means by which to create a new instance<br>beyond the trivial nullary <code>init()</code> initializer (which creates an empty<br>string).</p>
<h2 id="Proposed_solution">Proposed solution</h2><p>We add a new type <code>StaticString.UnicodeScalarView</code> that conforms to<br><code>CollectionType</code> and a new property <code>unicodeScalars</code> on <code>StaticString</code>. We also<br>add 2 initializers to <code>StaticString</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(<span class="number">_</span> unicodeScalars: <span class="type">UnicodeScalarView</span>)</span><br><span class="line"><span class="keyword">init</span>(<span class="number">_</span> unicodeScalars: <span class="type">Slice</span>&lt;<span class="type">UnicodeScalarView</span>&gt;)</span><br></pre></td></tr></table></figure>
<p>Together, this allows the user to manipulate the unicode scalar view to produce<br>the desired slice, and then to create a <code>StaticString</code> from the results. This<br>has the added benefit of providing a convenient way to work with<br><code>StaticString</code>s as a sequence of <code>UnicodeScalar</code>s instead of as a UTF8 buffer.</p>
<h2 id="Detailed_design">Detailed design</h2><p>The API looks like this:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StaticString</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// The value of `self` as a collection of [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value).</span></span><br><span class="line">  public <span class="keyword">var</span> unicodeScalars: <span class="type">UnicodeScalarView</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Construct the `StaticString` corresponding to the given</span></span><br><span class="line">  <span class="comment">/// `UnicodeScalarView`.</span></span><br><span class="line">  public <span class="keyword">init</span>(<span class="number">_</span>: <span class="type">UnicodeScalarView</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Construct the `StaticString` corresponding to the given</span></span><br><span class="line">  <span class="comment">/// `UnicodeScalarView` slice.</span></span><br><span class="line">  public <span class="keyword">init</span>(<span class="number">_</span>: <span class="type">Slice</span>&lt;<span class="type">UnicodeScalarView</span>&gt;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A collection of [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value) that</span></span><br><span class="line">  <span class="comment">/// encode a `StaticString`.</span></span><br><span class="line">  public <span class="class"><span class="keyword">struct</span> <span class="title">UnicodeScalarView</span> : <span class="title">CollectionType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span>: <span class="type">StaticString</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A position in a `StaticString.UnicodeScalarView`.</span></span><br><span class="line">    public <span class="class"><span class="keyword">struct</span> <span class="title">Index</span> : <span class="title">BidirectionalIndexType</span>, <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">      <span class="comment">/// Returns the next consecutive value after `self`.</span></span><br><span class="line">      <span class="comment">///</span></span><br><span class="line">      <span class="comment">/// - Requires: The next value is representable.</span></span><br><span class="line">      @warn_unused_result</span><br><span class="line">      public <span class="func"><span class="keyword">func</span> <span class="title">successor</span><span class="params">()</span></span> -&gt; <span class="type">Index</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/// Returns the previous consecutive value before `self`.</span></span><br><span class="line">      <span class="comment">///</span></span><br><span class="line">      <span class="comment">/// - Requires: The previous value is representable.</span></span><br><span class="line">      @warn_unused_result</span><br><span class="line">      public <span class="func"><span class="keyword">func</span> <span class="title">predecessor</span><span class="params">()</span></span> -&gt; <span class="type">Index</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The position of the first `UnicodeScalar` if the `StaticString` is</span></span><br><span class="line">    <span class="comment">/// non-empty; identical to `endIndex` otherwise.</span></span><br><span class="line">    public <span class="keyword">var</span> startIndex: <span class="type">Index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The "past the end" position.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// `endIndex` is not a valid argument to `subscript`, and is always</span></span><br><span class="line">    <span class="comment">/// reachable from `startIndex` by zero or more applications of</span></span><br><span class="line">    <span class="comment">/// `successor()`.</span></span><br><span class="line">    public <span class="keyword">var</span> endIndex: <span class="type">Index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns `true` iff `self` is empty.</span></span><br><span class="line">    public <span class="keyword">var</span> isEmpty: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">subscript</span>(position: <span class="type">Index</span>) -&gt; <span class="type">UnicodeScalar</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>None.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>We could add a <code>subscript(bounds: Range&lt;Index&gt;)</code> to <code>StaticString</code> directly,<br>but there’s no good way to define <code>Index</code> (for the same reasons <code>String</code><br>doesn’t conform to <code>CollectionType</code>).</p>
<p>We could expose an unsafe initializer from a pointer, so the user can<br>manipulate <code>utf8Start</code> to produce the desired pointer, but this would be very<br>unsafe and allow users to try and trick code taking <code>StaticString</code> into<br>accepting a dynamic string instead.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Add_StaticString-UnicodeScalarView">Add StaticString.UnicodeScalarView</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swif]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0011-replace-typealias-associated]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0011-replace-typealias-associated/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0011-replace-typealias-associated/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:49:13.044Z</updated>
    <content type="html"><![CDATA[<h1 id="Replace_typealias_keyword_with_associated_for_associated_type_declarations">Replace <code>typealias</code> keyword with <code>associated</code> for associated type declarations</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md" target="_blank" rel="external">SE-0011</a></li>
<li>Author(s): <a href="https://github.com/loiclec" target="_blank" rel="external">Loïc Lecrenier</a></li>
<li>Status: <strong>Awaiting review</strong></li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>The <code>typealias</code> keyword is currently used to declare two kinds of types:</p>
<ol>
<li>Type Aliases (alternative name for an existing type)</li>
<li>Associated Types (placeholder name to type used as part of a protocol)</li>
</ol>
<p>These two kinds of declarations are different and should use distinct keywords.<br>This would emphasize the difference between them and reduce some of the<br>confusion surrounding the use of associated types.</p>
<p>The proposed new keyword is <code>associated</code>.</p>
<h2 id="Motivation">Motivation</h2><p>Re-using <code>typealias</code> for associated type declarations is confusing in many ways.</p>
<ol>
<li>It is not obvious that <code>typealias</code> in protocols means something else than in<br>other places.</li>
<li>It hides the existence of associated types to beginners, which allows them<br>to write code they misunderstand.</li>
<li>It hides the absence of concrete type aliases inside protocols.</li>
</ol>
<p>In particular, <strong>2 + 3</strong> leads to programmers writing</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>without realizing that <code>Element</code> is a new associated type with a default value<br>of <code>Container.Generator.Element</code> instead of a type alias to<br><code>Container.Generator.Element</code>.</p>
<p>However, this code</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>declares <code>Element</code> as a type alias to <code>Container.Generator.Element</code>.</p>
<p>These subtleties of the language currently require careful consideration to<br>understand.</p>
<h2 id="Proposed_solution">Proposed solution</h2><p>For declaring associated types, replace the <code>typealias</code> keyword with <code>associated</code>.</p>
<p>This solves the issues mentioned above:</p>
<ol>
<li><code>typealias</code> can now only be used for type aliases declaration.</li>
<li>Beginners are now forced to learn about associated types when creating protocols.</li>
<li>An error message can now be displayed when someone tries to create a type alias<br>inside a protocol.</li>
</ol>
<p>This eliminates the confusion showed in the previous code snippets.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    associated <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span> <span class="comment">// error: cannot declare type alias inside protocol, use protocol extension instead</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    associated <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Alternative keywords considered: <code>withtype</code>, <code>associatedtype</code>, <code>typeassociation</code>, <code>type</code></p>
<h2 id="Proposed_Approach">Proposed Approach</h2><p>For declaring associated types, I suggest adding <code>associated</code> and deprecating<br><code>typealias</code> in Swift 2.2, and removing <code>typealias</code> entirely in Swift 3.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>As it simply replaces one keyword for another, the transition to <code>associated</code><br>could be easily automated without any risk of breaking existing code.</p>
<h2 id="Community_Responses">Community Responses</h2><ul>
<li>“I think this is a great idea; re-using typealias for associated types was a mistake.” -John McCall</li>
<li>“Agreed.” -Chris Lattner</li>
<li>“+1 to the proposal, emphasizing the distinction is important; and I<br>like “associated” as the keyword for this purpose, too.” -Dmitri Gribenko</li>
<li>“+1 for using a distinct keyword for associated types” -Ilya Belenkiy</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Replace_typealias_keyword_with_associated_for_associated_type_declarations">Replace <code>typealias</code> keyword with <code>associ]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0012-add-noescape-to-public-library-api]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0012-add-noescape-to-public-library-api/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0012-add-noescape-to-public-library-api/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:49:22.503Z</updated>
    <content type="html"><![CDATA[<h1 id="Add_@noescape_to_public_library_API">Add <code>@noescape</code> to public library API</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0012-add-noescape-to-public-library-api.md" target="_blank" rel="external">SE-0012</a></li>
<li>Author(s): <a href="https://github.com/jtbandes" target="_blank" rel="external">Jacob Bandes-Storch</a></li>
<li>Status: <strong>Awaiting review</strong></li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><h3 id="@noescape"><code>@noescape</code></h3><p>Swift provides <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID546" target="_blank" rel="external">a <code>@noescape</code> declaration attribute</a> which can be applied to closure parameters, indicating that the closure’s execution is guaranteed not to escape the function call.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">withLock</span><span class="params">(@noescape perform closure: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    myLock.lock()</span><br><span class="line">    closure()</span><br><span class="line">    myLock.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Thus, a closure argument is guaranteed to be executed (if executed at all) <em>before</em> the function returns. This enables the compiler to perform various optimizations, such as omitting unnecessary capturing/retaining/releasing of <code>self</code>.</p>
<p>For example, just as “<code>self.</code>“ may be omitted in the context of a method, since a <code>@noescape</code> closure is known not to capture <code>self</code>, properties and methods can be accessed without the <code>self.</code> prefix:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">incrementCounter</span><span class="params">()</span></span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>  <span class="comment">// "self." elided in an instance method</span></span><br><span class="line">        </span><br><span class="line">        withLock &#123;</span><br><span class="line">            <span class="comment">// Without @noescape, the following line would produce the error</span></span><br><span class="line">            <span class="comment">//   "reference to property 'counter' in closure requires</span></span><br><span class="line">            <span class="comment">//    explicit 'self.' to make capture semantics explicit".</span></span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="In_C_and_Objective-C">In C and Objective-C</h3><p>Clang understands the <code>noescape</code> attribute, spelled <code>__attribute__((noescape))</code> or <code>__attribute__((__noescape__))</code>. When function definitions whose block or function-pointer parameters have this attribute are imported to Swift, they are visible with a Swift <code>@noescape</code> attribute.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void performWithLock(__attribute__((noescape)) void (^block)()) &#123;  // exposed as @noescape to Swift</span><br><span class="line">    lock(myLock);</span><br><span class="line">    block();</span><br><span class="line">    unlock(myLock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)performWithLock:(__attribute__((noescape)) void (^)())block &#123;  // exposed as @noescape to Swift&#10;    [myLock lock];&#10;    block();&#10;    [myLock unlock];&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Motivation">Motivation</h2><p>Many standard methods and functions — particularly in Foundation and libdispatch — have non-escaping closure semantics, but <strong>do not have <code>__attribute__((noescape))</code></strong>. This thwarts the compiler optimizations and syntax shortcuts granted by <code>@noescape</code>, when they should otherwise be applied.</p>
<p>In pure Swift, there is no workaround, but by writing some custom C/Objective-C wrapper functions, users can work around these limitations:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// MyProject-Bridging-Header.h&#10;&#10;NS_INLINE void MyDispatchSyncWrapper(dispatch_queue_t queue, __attribute__((noescape)) dispatch_block_t block)&#10;&#123;&#10;    dispatch_sync(queue, block);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>However, it’s clear that library functions with non-escaping semantics should be marked with the <code>noescape</code> attribute at the source, so that users don’t have to wrap every function they’d like to use.</p>
<h2 id="Proposed_solution">Proposed solution</h2><ol>
<li>Audit system C/Objective-C libraries (stdlib, libdispatch, Foundation, …) for functions and methods with closure parameters that are guaranteed not to escape the lifetime of the call.<ul>
<li><em>See the end of this document for a comprehensive list of candidate functions/methods.</em></li>
</ul>
</li>
<li>Annotate such functions and methods’ block/function-pointer parameters with <code>__attribute__((noescape))</code>.</li>
<li>For libraries with Swift-specific forks (like <a href="https://github.com/apple/swift-corelibs-libdispatch" target="_blank" rel="external">swift-corelibs-libdispatch</a>), the change should be made in the Apple-internal upstream version as well.</li>
</ol>
<h6 id="Example_patch">Example patch</h6><p>An example patch to libdispatch can be seen at <a href="https://github.com/apple/swift-corelibs-libdispatch/pull/6/files" target="_blank" rel="external">https://github.com/apple/swift-corelibs-libdispatch/pull/6/files</a>.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>Users who previously used functions which are newly <code>@noescape</code> may have unnecessary instances of <code>self.</code> in their code. However, there should be no breaking syntax changes and no functional difference.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>The Swift compiler’s support for supplementary “API notes” (<code>.apinotes</code> files) could be extended and used to annotate closure parameters as non-escaping.</p>
<p>However, I believe it’s better to put annotations in headers for the following reasons:</p>
<ul>
<li>The presence of <code>__attribute__((noescape))</code> in library headers clarifies API contracts, and encourages users to use this attribute in their own code where applicable.</li>
<li>With apinotes, the benefits to Swift would be limited to specific libraries and functions, leaving annotation in the hands of the Swift compiler project. Given a version of a library with annotated headeres, however, no extra compiler configuration is required to take advantage of the annotation.</li>
<li>As Clang itself improves, the benefits of <code>__attribute__((noescape))</code> can be granted to Objective-C callers as well as Swift (for example, by suppressing <code>-Wimplicit-retain-self</code> &lt;rdar://19914650&gt;).</li>
</ul>
<h2 id="Comprehensive_list_of_methods/functions_with_non-escaping_block_parameters">Comprehensive list of methods/functions with non-escaping block parameters</h2><p>Note that Objective-C library methods tend to come in three variants:</p>
<ul>
<li>“[elements] passing test”</li>
<li>“[sorted] using comparator”</li>
<li>“enumerate using block/function”</li>
</ul>
<h3 id="stdlib">stdlib</h3><ul>
<li><code>bsearch()</code>, <code>bsearch_b()</code></li>
<li><code>heapsort()</code>, <code>heapsort_b()</code></li>
<li><code>mergesort()</code>, <code>mergesort_b()</code></li>
<li><code>psort()</code>, <code>psort_b()</code></li>
<li><code>qsort()</code>, <code>qsort_b()</code></li>
</ul>
<h3 id="libdispatch">libdispatch</h3><ul>
<li><code>dispatch_apply()</code>, <code>dispatch_apply_f()</code></li>
<li><code>dispatch_barrier_sync()</code>, <code>dispatch_barrier_sync_f()</code></li>
<li><code>dispatch_block_perform()</code></li>
<li><code>dispatch_data_apply()</code></li>
<li><code>dispatch_once()</code>, <code>dispatch_once_f()</code></li>
<li><code>dispatch_sync()</code>, <code>dispatch_sync_f()</code></li>
</ul>
<h3 id="CoreFoundation">CoreFoundation</h3><ul>
<li><code>CFArrayBSearchValues()</code></li>
<li><code>CFArraySortValues()</code></li>
<li><code>CFTreeSortChildren()</code></li>
</ul>
<h3 id="Foundation">Foundation</h3><h6 id="“Passing_test”_methods">“Passing test” methods</h6><ul>
<li><code>-[NSArray indexOfObjectPassingTest:]</code></li>
<li><code>-[NSArray indexOfObjectsAtIndexes:passingTest:]</code></li>
<li><code>-[NSArray indexesOfObjectsAtIndexes:passingTest:]</code></li>
<li><code>-[NSArray indexesOfObjectsPassingTest:]</code></li>
<li><code>-[NSDictionary keysOfEntriesPassingTest:]</code></li>
<li><code>-[NSDictionary keysOfEntriesWithOptions:passingTest:]</code></li>
<li><code>-[NSIndexSet indexInRange:options:passingTest:]</code></li>
<li><code>-[NSIndexSet indexPassingTest:]</code></li>
<li><code>-[NSIndexSet indexWithOptions:passingTest:]</code></li>
<li><code>-[NSIndexSet indexesInRange:options:passingTest:]</code></li>
<li><code>-[NSIndexSet indexesPassingTest:]</code></li>
<li><code>-[NSIndexSet indexesWithOptions:passingTest:]</code></li>
<li><code>-[NSOrderedSet indexOfObjectPassingTest:]</code></li>
<li><code>-[NSOrderedSet indexOfObjectsAtIndexes:passingTest:]</code></li>
<li><code>-[NSOrderedSet indexesOfObjectsAtIndexes:passingTest:]</code></li>
<li><code>-[NSOrderedSet indexesOfObjectsPassingTest:]</code></li>
<li><code>-[NSSet objectsPassingTest:]</code></li>
<li><code>-[NSSet objectsWithOptions:passingTest:]</code></li>
</ul>
<h6 id="“Using_comparator/function”_methods">“Using comparator/function” methods</h6><ul>
<li><code>-[NSArray indexOfObject:inSortedRange:options:usingComparator:]</code></li>
<li><code>-[NSArray sortedArrayUsingComparator:]</code></li>
<li><code>-[NSArray sortedArrayUsingFunction:context:]</code></li>
<li><code>-[NSArray sortedArrayUsingFunction:context:hint:]</code></li>
<li><code>-[NSArray sortedArrayWithOptions:usingComparator:]</code></li>
<li><code>-[NSDictionary keysSortedByValueUsingComparator:]</code></li>
<li><code>-[NSDictionary keysSortedByValueWithOptions:usingComparator:]</code></li>
<li><code>-[NSMutableArray sortUsingComparator:]</code></li>
<li><code>-[NSMutableArray sortUsingFunction:context:]</code></li>
<li><code>-[NSMutableArray sortWithOptions:usingComparator:]</code></li>
<li><code>-[NSMutableOrderedSet sortRange:options:usingComparator:]</code></li>
<li><code>-[NSMutableOrderedSet sortWithOptions:usingComparator:]</code></li>
</ul>
<h6 id="“Enumerate_using_block”_methods">“Enumerate using block” methods</h6><ul>
<li><code>-[NSArray enumerateObjectsUsingBlock:]</code></li>
<li><code>-[NSArray enumerateObjectsWithOptions:usingBlock:]</code></li>
<li><code>-[NSData enumerateByteRangesUsingBlock:]</code></li>
<li><code>-[NSDictionary enumerateKeysAndObjectsUsingBlock:]</code></li>
<li><code>-[NSDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]</code></li>
<li><code>-[NSIndexSet enumerateIndexesUsingBlock:]</code></li>
<li><code>-[NSIndexSet enumerateIndexesWithOptions:usingBlock:]</code></li>
<li><code>-[NSIndexSet enumerateRangesInRange:options:usingBlock:]</code></li>
<li><code>-[NSIndexSet enumerateRangesUsingBlock:]</code></li>
<li><code>-[NSIndexSet enumerateRangesWithOptions:usingBlock:]</code></li>
<li><code>-[NSOrderedSet enumerateObjectsUsingBlock:]</code></li>
<li><code>-[NSOrderedSet enumerateObjectsWithOptions:usingBlock:]</code></li>
<li><code>-[NSSet enumerateObjectsUsingBlock:]</code></li>
<li><code>-[NSSet enumerateObjectsWithOptions:usingBlock:]</code></li>
<li><code>-[NSString enumerateLinesUsingBlock:]</code></li>
<li><code>-[NSString enumerateSubstringsInRange:options:usingBlock:]</code></li>
</ul>
<h3 id="Other">Other</h3><p>The AVFoundation, SceneKit, SpriteKit, AppKit, and MediaPlayer frameworks have methods that could also use <code>__attribute__((noescape))</code>, but those are considered outside the scope of this proposal.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Add_@noescape_to_public_library_API">Add <code>@noescape</code> to public library API</h1><ul>
<li>Proposal: <a href="https://github]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0013-remove-partial-application-super]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0013-remove-partial-application-super/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0013-remove-partial-application-super/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:49:34.564Z</updated>
    <content type="html"><![CDATA[<h1 id="Remove_Partial_Application_of_Non-Final_Super_Methods_(Swift_2-2)">Remove Partial Application of Non-Final Super Methods (Swift 2.2)</h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0013-remove-partial-application-super.md" target="_blank" rel="external">SE-0013</a></li>
<li>Author(s): <a href="https://github.com/bitjammer" target="_blank" rel="external">David Farler</a></li>
<li>Status: <strong>Awaiting review</strong></li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>Prior to Swift 2.2, calls to superclass methods like <code>super.foo()</code> in<br>Native Swift classes were dispatched statically by recording a reference<br>to the function and calling it directly by its mangled name. In Swift<br>2.2, class methods invoked via <code>super</code> will use dynamic dispatch. That<br>is, the method will be looked up in the superclass’s vtable at runtime.<br>However, if the method is marked with <code>final</code>, it will use the old<br>static dispatch, since no class will be able to override it.</p>
<p>The mechanisms that support currying require thunks to be emitted so<br>that the function can be called at various uncurrying levels. Currying<br>will be removed in Swift 3.0 so, rather than invest more engineering in<br>those mechanisms, I propose that we disallow partial application of<br>non-final methods through <code>super</code>, except where the <code>self</code> parameter is<br>implicitly captured.</p>
<h2 id="Motivation">Motivation</h2><p>The motivation of this change is partially motivated by implementation<br>concerns. The machinery for curry thunk mechanism has a lot of<br>assumptions about what the ultimate function call will be: an apply of a<br>static <code>function_ref</code> or a dynamic dispatch through a <code>class_method</code>,<br>which originate in something like <code>doFoo(self.foo)</code> (note <code>self</code> instead<br>of <code>super</code>). Rather than risk regressions stemming from significant<br>replumbing, it would a good tradeoff to pull in this limited portion of<br>the currying removals in Swift 3.0.</p>
<h2 id="Detailed_design">Detailed design</h2><p>In terms of design and implementation, this is a trivial change. In<br>semantic analysis, perform the following check on call expressions: if<br>the call expression is based in super, the referenced function isn’t<br>final, and the application does not fulfill all of the parameters, emit<br>an error diagnostic.</p>
<h3 id="Example_Code">Example Code</h3><h4 id="Illegal:_Partial_application_of_non-final_method">Illegal: Partial application of non-final method</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">doFoo</span><span class="params">(f: <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">  f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> : <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>() &#123;</span><br><span class="line">    doFoo(<span class="keyword">super</span>.foo()) <span class="comment">// Illegal - doesn't apply the second time.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="OK:_Partial_application_of_final_method">OK: Partial application of final method</h4><p>This is safe because the new dynamic super dispatch mechanisms don’t<br>kick in for final methods - these fall back to the original static<br>function reference because no class can ever override the original<br>implementation.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">doFoo</span><span class="params">(f: <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">  f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  final <span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> : <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    doFoo(<span class="keyword">super</span>.foo()) <span class="comment">// OK - method is final.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The implementation for this change is available on <a href="https://github.com/apple/swift/tree/remove-partial-super" target="_blank" rel="external">apple/swift/remove-partial-super</a>.</p>
<h4 id="OK:_Partial_application_with_implicit_self">OK: Partial application with implicit self</h4><p>Partial application of the implicit self parameter is still allowed with<br>this change. When you pass <code>super.foo</code> around, you have in fact<br>partially applied the method - you’ve captured the <code>self</code> argument<br>present in all Swift method calls. This is safe because no explicit<br>thunks need to be generated at SILGen - the <code>partial_apply</code> instruction<br>will create a closure without additional SIL code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">doFoo</span><span class="params">(f: <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">  f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> : <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    doFoo(<span class="keyword">super</span>.foo) <span class="comment">// OK - only partially applies self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>Given that we’ve decided to remove currying outright, this would be a<br>small percentage of that usage. Generally, calls on <code>super</code> are for<br>delegation, where all arguments are often present.</p>
<h2 id="Alternatives_considered">Alternatives considered</h2><p>The only alternative is to make super method dispatch a citizen in the<br>thunk emission process, which requires deep changes to SILGen, symbol<br>mangling, and IRGen. Although this more comprehensive change would allow<br>us to adopt dynamic super dispatch with no source changes for those<br>writing in Swift, I believe the proposal is a reasonable tradeoff.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Remove_Partial_Application_of_Non-Final_Super_Methods_(Swift_2-2)">Remove Partial Application of Non-Final Super Methods (Swift 2.2)]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0014-constrained-AnySequence]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/proposals/0014-constrained-AnySequence/"/>
    <id>http://yoursite.com/2015/12/15/swift/proposals/0014-constrained-AnySequence/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:49:45.764Z</updated>
    <content type="html"><![CDATA[<h1 id="Constraining_AnySequence-init">Constraining <code>AnySequence.init</code></h1><ul>
<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md" target="_blank" rel="external">SE-0014</a></li>
<li>Author(s): <a href="https://github.com/moiseev" target="_blank" rel="external">Max Moiseev</a></li>
<li>Status: <strong>Awaiting review</strong> (schedule December 18–21, 2015)</li>
<li>Review Manager: <a href="https://github.com/DougGregor" target="_blank" rel="external">Doug Gregor</a></li>
</ul>
<h2 id="Introduction">Introduction</h2><p>In order to allow <code>AnySequence</code> delegate calls to the underlying sequence,<br>its initializer should have extra constraints.</p>
<h2 id="Motivation">Motivation</h2><p>At the moment <code>AnyCollection</code> does not delegate calls to <code>SequenceType</code> protocol<br>methods to the underlying base sequence, which results in dynamic downcasts in<br>places where this behavior is needed (see default implementations of<br><code>SequenceType.dropFirst</code> or <code>SequenceType.prefix</code>). Besides, and this is even<br>more important, customized implementations of <code>SequenceType</code> methods would be<br>ignored without delegation.</p>
<h2 id="Proposed_solution">Proposed solution</h2><p>See the implementation in <a href="https://github.com/apple/swift/pull/220" target="_blank" rel="external">this PR</a>.</p>
<p>In order for this kind of delegation to become possible, <code>_SequenceBox</code> needs to<br>be able to ‘wrap’ not only the base sequence but also it’s associated<br><code>SubSequence</code>. So instead of being declared like this:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">_SequenceBox</span>&lt;<span class="title">S</span> : <span class="title">SequenceType</span>&gt;</span><br><span class="line">    : <span class="title">_AnySequenceBox</span>&lt;<span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>it would become this:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">_SequenceBox</span>&lt;</span><br><span class="line">  <span class="title">S</span> : <span class="title">SequenceType</span></span><br><span class="line">  <span class="title">where</span></span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span> : <span class="title">SequenceType</span>,</span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span>.<span class="title">Generator</span>.<span class="title">Element</span> == <span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>,</span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span>.<span class="title">SubSequence</span> == <span class="title">S</span>.<span class="title">SubSequence</span></span><br><span class="line">&gt; : <span class="title">_AnySequenceBox</span>&lt;<span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>Which, in it’s turn, will lead to <code>AnySequence.init</code> getting a new set of<br>constraints as follows.</p>
<p>Before the change:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">AnySequence</span>&lt;<span class="title">Element</span>&gt; : <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">  public <span class="keyword">init</span>&lt;</span><br><span class="line">    <span class="type">S</span>: <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span></span><br><span class="line">  &gt;(<span class="number">_</span> base: <span class="type">S</span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After the change:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">AnySequence</span>&lt;<span class="title">Element</span>&gt; : <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">  public <span class="keyword">init</span>&lt;</span><br><span class="line">    <span class="type">S</span>: <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span> : <span class="type">SequenceType</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span>.<span class="type">SubSequence</span> == <span class="type">S</span>.<span class="type">SubSequence</span></span><br><span class="line">  &gt;(<span class="number">_</span> base: <span class="type">S</span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>These constraints, in fact, should be applied to <code>SequenceType</code> protocol itself<br>(although, that is not currently possible), as we expect every <code>SequenceType</code><br>implementation to satisfy them already.</p>
<h2 id="Impact_on_existing_code">Impact on existing code</h2><p>New constraints do not affect any built-in types that conform to<br><code>SequenceType</code> protocol as they are essentially constructed like this<br>(<code>SubSequence.SubSequence == SubSequence</code>). 3rd party collections, if they use<br>the default <code>SubSequence</code> (i.e. <code>Slice</code>), should also be fine. Those having<br>custom <code>SubSequence</code>s may stop conforming to the protocol.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Constraining_AnySequence-init">Constraining <code>AnySequence.init</code></h1><ul>
<li>Proposal: <a href="https://github.com/apple/s]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swift schedule]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/schedule/"/>
    <id>http://yoursite.com/2015/12/15/swift/schedule/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:44:20.992Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift_Evolution_Review_Schedule">Swift Evolution Review Schedule</h1><p>The <a href="process.md" title="The Swift evolution process">Swift evolution process</a> describes the process<br>by which Swift evolves. This document tracks the currently active<br>proposals in that process.</p>
<h2 id="Active_reviews">Active reviews</h2><p>(No proposals under active review)</p>
<h2 id="Upcoming_reviews">Upcoming reviews</h2><ul>
<li>December 15–17, 2015: <a href="proposals/0008-lazy-flatmap-for-optionals.md">SE-0008</a></li>
<li>December 16–20, 2015: <a href="proposals/0009-require-self-for-accessing-instance-members.md">SE-0009</a></li>
<li>December 18–21, 2015: <a href="proposals/0014-constrained-AnySequence.md">SE-0014</a></li>
</ul>
<h2 id="Proposals_awaiting_scheduling">Proposals awaiting scheduling</h2><ul>
<li><a href="proposals/0010-add-staticstring-unicodescalarview.md">SE-0010</a></li>
<li><a href="proposals/0011-replace-typealias-associated.md">SE-0011</a></li>
<li><a href="proposals/0012-add-noescape-to-public-library-api.md">SE-0012</a></li>
<li><a href="proposals/0013-remove-partial-application-super.md">SE-0013</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift_Evolution_Review_Schedule">Swift Evolution Review Schedule</h1><p>The <a href="process.md" title="The Swift evolution process"]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swift readme]]></title>
    <link href="http://yoursite.com/2015/12/15/swift/README/"/>
    <id>http://yoursite.com/2015/12/15/swift/README/</id>
    <published>2015-12-15T04:30:00.000Z</published>
    <updated>2015-12-15T02:44:09.894Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift_Programming_Language_Evolution">Swift Programming Language Evolution</h1><p><strong>Before you initiate a pull request</strong>, please read the process document. Ideas should be thoroughly discussed on the <a href="https://swift.org/community/#swift-evolution" target="_blank" rel="external">swift-evolution mailing list</a> first.</p>
<p>This repository tracks the ongoing evolution of Swift. It contains:</p>
<ul>
<li>Goals for upcoming Swift releases (this document)</li>
<li>The <a href="schedule.md">Swift evolution review schedule</a> tracking proposals to change Swift</li>
<li>The <a href="process.md">Swift evolution process</a> that governs the evolution of Swift.</li>
</ul>
<p>This document describes goals for the Swift language on a per-release<br>basis, usually listing minor releases adding to the currently shipping<br>version and one major release out.  Each release will have many<br>smaller features or changes independent of these larger goals, and not<br>all goals are reached for each release.</p>
<p>Goals for past versions are included at the bottom of the document for<br>historical purposes, but are not necessarily indicative of the<br>features shipped. The release notes for each shipped version are the<br>definitive list of notable changes in each release.</p>
<h2 id="Development_major_version:_Swift_3-0">Development major version:  Swift 3.0</h2><p>Expected release date: Fall 2016</p>
<p>The primary goal of this release is to stabilize the binary interface<br>of the language and standard library. As part of this process, we will<br>focus and refine the language to provide better overall consistency in<br>feel and implementation. Swift 3.0 will contain <em>source-breaking</em><br>changes from Swift 2.x where necessary to support these goals. More<br>concretely, this release is focused on several key areas:</p>
<ul>
<li><strong>Stable ABI</strong>: Stabilize the binary interface (ABI) to guarantee a level of binary compatibility moving forward. This involves finalizing runtime data structures, name mangling, calling conventions, and so on, as well as finalizing some of the details of the language itself that have an impact on its ABI. Stabilizing the ABI also extends to the Standard Library, its data types, and core algorithms. Successful ABI stabilization means that applications and libraries compiled with future versions of Swift can interact at a binary level with applications and libraries compiled with Swift 3.0, even if the source language changes.</li>
<li><strong>Resilience</strong>: Solve the general problem of <a href="https://en.wikipedia.org/wiki/Fragile_binary_interface_problem" target="_blank" rel="external">fragile binary interface</a>, which currently requires that an application be recompiled if any of the libraries it depends on changes. For example, adding a new stored property or overridable method to a class should not require all subclasses of that class to be recompiled. There are several broad concerns for resilience:<ul>
<li><em>What changes are resilient?</em>: Define the kinds of changes that can be made to a library without breaking clients of that library. Source-compatible changes to libraries are good candidates for resilient changes, but such decisions also consider the effects on the implementation.</li>
<li><em>How is a resilient library implemented?</em>: What runtime representations are necessary to allow applications to continue to work after making resilient changes to a library? This dovetails with the stabilization of the ABI, because the stable ABI should be a resilient ABI.</li>
<li><em>How do we maintain high performance?</em>: Resilient implementations often incur more execution overhead than non-resilient (or <em>fragile</em>) implementations, because resilient implementations need to leave some details unspecified until load time, such as the specific sizes of a class or offsets of a stored property.</li>
</ul>
</li>
<li><strong>Portability</strong>: Make Swift available on other platforms and ensure that one can write portable Swift code that works properly on all of those platforms.</li>
<li><strong>Type system cleanup and documentation</strong>: Revisit and document the various subtyping and conversion rules in the type system, as well as their implementation in the compiler’s type checker. The intent is to converge on a smaller, simpler type system that is more rigorously defined and more faithfully represented by the type checker.</li>
<li><strong>Complete generics</strong>: Generics are used pervasively in a number of Swift libraries, especially the standard library. However, there are a number of generics features the standard library requires to fully realize its vision, including recursive protocol constraints, the ability to make a constrained extension conform to a new protocol (i.e., an array of <code>Equatable</code> elements is <code>Equatable</code>), and so on. Swift 3.0 should provide those generics features needed by the standard library, because they affect the standard library’s ABI.</li>
<li><strong>Focus and refine the language</strong>: Despite being a relatively young language, Swift’s rapid development has meant that it has accumulated some language features and library APIs that don’t fit well with the language as a whole. Swift 3 will remove or improve those features to provide better overall consistency for Swift.</li>
<li><strong>API design guidelines</strong>: The way in which Swift is used in popular<br>libraries has almost as much of an effect on the character of Swift<br>code as the Swift language itself. The <a href="https://swift.org/documentation/api-design-guidelines.html" target="_blank" rel="external">API design<br>guidelines</a> provide guidance for<br>building great Swift APIs. For Swift 3.0, the Swift standard library<br>and core libraries are being updated to match these guidelines, and<br>Swift’s Objective-C importer will <a href="proposals/0005-objective-c-name-translation.md">automatically map</a> from the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="external">Cocoa guidelines for<br>Objective-C</a><br>to the Swift API guidelines.</li>
</ul>
<h3 id="Out_of_Scope">Out of Scope</h3><p>A significant part of delivering a major release is in deciding what<br><em>not</em> to do, which means deferring many good ideas. The following is a<br>sampling of potentially good ideas that are not in scope for Swift<br>3.0:</p>
<ul>
<li><p><strong>Full source compatibility</strong>: Swift 3.0 will not provide full<br>source compatibility. Rather, it can and will introduce<br>source-breaking changes needed to support the main goals of Swift<br>3.0.</p>
</li>
<li><p><strong>Concurrency</strong>: Swift 3.0 relies entirely on platform concurrency<br>primitives (libdispatch, Foundation, pthreads, etc.) for<br>concurrency. Language support for concurrency is an often-requested<br>and potentially high-value feature, but is too large to be in scope<br>for Swift 3.0.</p>
</li>
<li><p><strong>C++ Interoperability</strong>: Swift’s interoperability with C and<br>Objective-C is one of its major strengths, allowing it to integrate<br>with platform APIs. Interoperability with C++ libraries would<br>enhance Swift’s ability to work with existing libraries and APIs.<br>However, C++ itself is a very complex language, and providing good<br>interoperability with C++ is a significant undertaking that is out<br>of scope for Swift 3.0.</p>
</li>
<li><p><strong>Hygienic Macros</strong>: A first-class macro system is something we may consider<br>in future releases.  We don’t want the existence of a macro system to be a<br>workaround that reduces the incentive for making the core language great.</p>
</li>
<li><p><strong>Major new library functionality</strong>: The Swift Standard Library is focused on<br>providing core “language” functionality as well as common data structures.  The<br>“corelibs” projects are focused on providing existing Foundation functionality<br>in a portable way.  We <em>will</em> consider minor extensions to their existing<br>feature sets to round out these projects.</p>
<p>On the other hand, major new libraries (e.g. a new Logging subsystem) are<br>best developed as independent projects on GitHub (or elsewhere) and organized<br>with the Swift Package Manager.  Beyond Swift 3 we may consider standardizing<br>popular packages or expanding the scope of the project.  </p>
</li>
</ul>
<h3 id="Accepted_proposals_for_Swift_3-0">Accepted proposals for Swift 3.0</h3><ul>
<li><a href="proposals/0005-objective-c-name-translation.md">Better Translation of Objective-C APIs Into Swift</a></li>
<li><a href="proposals/0002-remove-currying.md">Removing currying <code>func</code> declaration syntax</a></li>
<li><a href="proposals/0003-remove-var-parameters-patterns.md">Removing <code>var</code> from Function Parameters and Pattern Matching</a></li>
<li><a href="proposals/0004-remove-pre-post-inc-decrement.md">Remove the <code>++</code> and <code>--</code> operators</a></li>
<li><a href="proposals/0007-remove-c-style-for-loops.md">Remove C-style for-loops with conditions and incrementers</a></li>
</ul>
<h2 id="Development_minor_version:_Swift_2-2">Development minor version:  Swift 2.2</h2><p>Expected release date: Spring 2016</p>
<p>This release will focus on fixing bugs, improving<br>quality-of-implementation (QoI) with better warnings and diagnostics,<br>improving compile times, and improving performance.  It may also put<br>some finishing touches on features introduced in Swift 2.0, and<br>include some small additive features that don’t break Swift code or<br>fundamentally change the way Swift is used. As a step toward Swift<br>3.0, it will introduce warnings about upcoming source-incompatible<br>changes in Swift 3.0 so that users can begin migrating their code<br>sooner.</p>
<h3 id="Accepted_proposals_for_Swift_2-2">Accepted proposals for Swift 2.2</h3><ul>
<li><a href="proposals/0001-keywords-as-argument-labels.md">Allow (most) keywords as argument labels</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift_Programming_Language_Evolution">Swift Programming Language Evolution</h1><p><strong>Before you initiate a pull request</strong]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kitematic
安装]]></title>
    <link href="http://yoursite.com/2015/12/09/docker/kitematic/README/"/>
    <id>http://yoursite.com/2015/12/09/docker/kitematic/README/</id>
    <published>2015-12-09T02:34:35.827Z</published>
    <updated>2015-12-09T02:34:35.812Z</updated>
    <content type="html"><![CDATA[<h1 id="Kitematic:_安装_Kitematic">Kitematic: 安装 Kitematic</h1><p>你可以在 Mac 或者 Windows PC 上像安装其它应用一样来安装 Kitematic：下载安装包，运行安装程序。</p>
<p>##下载 Kitematic</p>
<p><a href="https://kitematic.com/download/" target="_blank" rel="external">下载 Kitematic的 zip 文件</a>,双击解压文件，然后双击运行安装程序。您可能还需要将你的应用程序放到您的应用程序文件夹。</p>
<p>##初始化设置</p>
<p>第一次打开 Kitematic 会为你能够运行 Docker 容器而进行一些必要的设置。如果你没有安装 Virtualbox， Kitematic 会下载和安装最新版本。</p>
<p><img src="http://7xlbtp.com1.z0.glb.clouddn.com/installing.png" alt="安装图片"></p>
<p>做完这些之后！在一分钟之内，你就可以准备开始运行你的第一个容器。</p>
<p><img src="http://7xlbtp.com1.z0.glb.clouddn.com/containers.png" alt="容器"></p>
<p>##技术详细信息</p>
<p>Kitematic 是一个建立在其它应用上的 app，能够处理异常：</p>
<ul>
<li>如果 Virtualbox 没有安装，它将会安装它。</li>
</ul>
<h2 id="为什么_Kitematic_需要_root_密码">为什么 Kitematic 需要 root 密码</h2><p>为什么 Kitematic 需要你的 root 密码，这里有两个原因：</p>
<ul>
<li>安装 Virtualbox 需要 root 权限，因为安装的时候需要对 Mac OS X 内核进行扩展。</li>
<li>如果你在安装 Kitematic 之前更改了默认的目录权限，当你复制 <code>docker</code> 和 <code>docker-machine</code> 到 <code>/usr/local/bin</code> 是需要 root 权限的。</li>
</ul>
<p>##下一步</p>
<p>有关使用 Kitematic 的信息，请查看<a href="userguide.md">用户指南</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Kitematic:_安装_Kitematic">Kitematic: 安装 Kitematic</h1><p>你可以在 Mac 或者 Windows PC 上像安装其它应用一样来安装 Kitematic：下载安装包，运行安装程序。</p>
<p>##下载 Kit]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装 Docker Machine]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/machine/install-machine/"/>
    <id>http://yoursite.com/2015/12/08/docker/machine/install-machine/</id>
    <published>2015-12-08T07:16:23.723Z</published>
    <updated>2015-12-08T07:16:23.723Z</updated>
    <content type="html"><![CDATA[<h1 id="安装_Docker_Machine">安装 Docker Machine</h1><p>Docker Machine 支持 Windows ,OS X ,和 Linux，并且被安装为一个独立的二进制文件。用于各平台架构的二进制文件链接如下：</p>
<ul>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_windows-386.exe" target="_blank" rel="external">Windows - 32bit</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_windows-amd64.exe" target="_blank" rel="external">Windows - 64bit</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_darwin-amd64" target="_blank" rel="external">OSX - x86_64</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_darwin-386" target="_blank" rel="external">OSX - (老款 macs)</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_linux-amd64" target="_blank" rel="external">Linux - x86_64</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_linux-386" target="_blank" rel="external">Linux - i386</a></li>
</ul>
<h2 id="OS_X_和_Linux">OS X 和 Linux</h2><p>在 Linux 或者 OSX 上安装，你需要下载二进制文件到你的 <code>PATH</code> 路径中( 例如: <code>/usr/local/bin</code>)，并且给与可执行权限。例如，在大多数的 OSX 系统上使用如下命令就可以完成安装了：</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">3.0</span>/docker-machine_darwin-amd64 &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>-machine
<span class="variable">$ </span>chmod +x /usr/local/bin/docker-machine
</code></pre><p>对于Linux，只是将上边的二进制名称中的 “darwin” 替换成 “linux”。</p>
<p>现在你可以使用 <code>docker-machine -v</code> 命令来查看版本信息。</p>
<pre><code>$ docker-machine -v
machine version <span class="number">0.3</span><span class="number">.0</span>
</code></pre><p>为了在您的机器上避免使用 ssh 来运行 Docker 命令，请确保您已经安装好了 Docker 客户端。</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/get.docker.com/builds</span><span class="regexp">/Darwin/x</span>86_64/docker-latest &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>
</code></pre><p>##Windows</p>
<p>目前，Docker 建议你在 Windows 上通过 <a href="https://msysgit.github.io/" target="_blank" rel="external">msysgit</a> 安装使用 Docker Machine,这将为 Docker Machine 提供一些依赖的程序，如 ssh ，还有 shell 功能。</p>
<p>当你安装好 msysgit ，启动终端命令提示行，并运行如下命令。这里假设你是在 64 位的 Windows 下安装，如果你使用 32 位系统安装，请将 URL 中的 “x86_64” 替换成 “i386”。</p>
<p>首先，安装 Docker clent 二进制文件 :</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/get.docker.com/builds</span><span class="regexp">/Windows/x</span>86_64/docker-latest.exe &gt; <span class="regexp">/bin/docker</span>
</code></pre><p>下一步，安装 Docker Machine 二进制文件:</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">3.0</span>/docker-machine_windows-amd64.exe &gt; <span class="regexp">/bin/docker</span>-machine
</code></pre><p>现在，检查 <code>docker-machine</code> 是否工作 :</p>
<pre><code>$ docker-machine -v
machine version <span class="number">0.3</span><span class="number">.0</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装_Docker_Machine">安装 Docker Machine</h1><p>Docker Machine 支持 Windows ,OS X ,和 Linux，并且被安装为一个独立的二进制文件。用于各平台架构的二进制文件链接如下：</p>
<ul>
<l]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
</feed>
