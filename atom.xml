<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[yosita]]></title>
  <subtitle><![CDATA[ѧ��]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-08T08:45:20.843Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[terry]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[中二病也要谈恋爱！恋 Lite＋SP 合辑【BD1080P】]]></title>
    <link href="http://yoursite.com/2015/12/18/bilibili/2831578/"/>
    <id>http://yoursite.com/2015/12/18/bilibili/2831578/</id>
    <published>2015-12-17T23:56:29.000Z</published>
    <updated>2015-12-08T08:45:20.843Z</updated>
    <content type="html"><![CDATA[<div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=2831578&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div>
]]></content>
    <summary type="html">
    <![CDATA[<div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http]]>
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
      <category term="helloworld" scheme="http://yoursite.com/categories/helloworld/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装 Docker Machine]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/machine/install-machine/"/>
    <id>http://yoursite.com/2015/12/08/docker/machine/install-machine/</id>
    <published>2015-12-08T07:16:23.723Z</published>
    <updated>2015-12-08T07:16:23.723Z</updated>
    <content type="html"><![CDATA[<h1 id="安装_Docker_Machine">安装 Docker Machine</h1><p>Docker Machine 支持 Windows ,OS X ,和 Linux，并且被安装为一个独立的二进制文件。用于各平台架构的二进制文件链接如下：</p>
<ul>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_windows-386.exe" target="_blank" rel="external">Windows - 32bit</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_windows-amd64.exe" target="_blank" rel="external">Windows - 64bit</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_darwin-amd64" target="_blank" rel="external">OSX - x86_64</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_darwin-386" target="_blank" rel="external">OSX - (老款 macs)</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_linux-amd64" target="_blank" rel="external">Linux - x86_64</a></li>
<li><a href="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_linux-386" target="_blank" rel="external">Linux - i386</a></li>
</ul>
<h2 id="OS_X_和_Linux">OS X 和 Linux</h2><p>在 Linux 或者 OSX 上安装，你需要下载二进制文件到你的 <code>PATH</code> 路径中( 例如: <code>/usr/local/bin</code>)，并且给与可执行权限。例如，在大多数的 OSX 系统上使用如下命令就可以完成安装了：</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">3.0</span>/docker-machine_darwin-amd64 &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>-machine
<span class="variable">$ </span>chmod +x /usr/local/bin/docker-machine
</code></pre><p>对于Linux，只是将上边的二进制名称中的 “darwin” 替换成 “linux”。</p>
<p>现在你可以使用 <code>docker-machine -v</code> 命令来查看版本信息。</p>
<pre><code>$ docker-machine -v
machine version <span class="number">0.3</span><span class="number">.0</span>
</code></pre><p>为了在您的机器上避免使用 ssh 来运行 Docker 命令，请确保您已经安装好了 Docker 客户端。</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/get.docker.com/builds</span><span class="regexp">/Darwin/x</span>86_64/docker-latest &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>
</code></pre><p>##Windows</p>
<p>目前，Docker 建议你在 Windows 上通过 <a href="https://msysgit.github.io/" target="_blank" rel="external">msysgit</a> 安装使用 Docker Machine,这将为 Docker Machine 提供一些依赖的程序，如 ssh ，还有 shell 功能。</p>
<p>当你安装好 msysgit ，启动终端命令提示行，并运行如下命令。这里假设你是在 64 位的 Windows 下安装，如果你使用 32 位系统安装，请将 URL 中的 “x86_64” 替换成 “i386”。</p>
<p>首先，安装 Docker clent 二进制文件 :</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/get.docker.com/builds</span><span class="regexp">/Windows/x</span>86_64/docker-latest.exe &gt; <span class="regexp">/bin/docker</span>
</code></pre><p>下一步，安装 Docker Machine 二进制文件:</p>
<pre><code><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">3.0</span>/docker-machine_windows-amd64.exe &gt; <span class="regexp">/bin/docker</span>-machine
</code></pre><p>现在，检查 <code>docker-machine</code> 是否工作 :</p>
<pre><code>$ docker-machine -v
machine version <span class="number">0.3</span><span class="number">.0</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装_Docker_Machine">安装 Docker Machine</h1><p>Docker Machine 支持 Windows ,OS X ,和 Linux，并且被安装为一个独立的二进制文件。用于各平台架构的二进制文件链接如下：</p>
<ul>
<l]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kitematic
安装]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/kitematic/README/"/>
    <id>http://yoursite.com/2015/12/08/docker/kitematic/README/</id>
    <published>2015-12-08T07:16:13.453Z</published>
    <updated>2015-12-08T07:16:13.453Z</updated>
    <content type="html"><![CDATA[<h1 id="Kitematic:_安装_Kitematic">Kitematic: 安装 Kitematic</h1><p>你可以在 Mac 或者 Windows PC 上像安装其它应用一样来安装 Kitematic：下载安装包，运行安装程序。</p>
<p>##下载 Kitematic</p>
<p><a href="https://kitematic.com/download/" target="_blank" rel="external">下载 Kitematic的 zip 文件</a>,双击解压文件，然后双击运行安装程序。您可能还需要将你的应用程序放到您的应用程序文件夹。</p>
<p>##初始化设置</p>
<p>第一次打开 Kitematic 会为你能够运行 Docker 容器而进行一些必要的设置。如果你没有安装 Virtualbox， Kitematic 会下载和安装最新版本。</p>
<p><img src="../images/installing.png" alt="安装图片"></p>
<p>做完这些之后！在一分钟之内，你就可以准备开始运行你的第一个容器。</p>
<p><img src="../images/containers.png" alt="容器"></p>
<p>##技术详细信息</p>
<p>Kitematic 是一个建立在其它应用上的 app，能够处理异常：</p>
<ul>
<li>如果 Virtualbox 没有安装，它将会安装它。</li>
</ul>
<h2 id="为什么_Kitematic_需要_root_密码">为什么 Kitematic 需要 root 密码</h2><p>为什么 Kitematic 需要你的 root 密码，这里有两个原因：</p>
<ul>
<li>安装 Virtualbox 需要 root 权限，因为安装的时候需要对 Mac OS X 内核进行扩展。</li>
<li>如果你在安装 Kitematic 之前更改了默认的目录权限，当你复制 <code>docker</code> 和 <code>docker-machine</code> 到 <code>/usr/local/bin</code> 是需要 root 权限的。</li>
</ul>
<p>##下一步</p>
<p>有关使用 Kitematic 的信息，请查看<a href="userguide.md">用户指南</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Kitematic:_安装_Kitematic">Kitematic: 安装 Kitematic</h1><p>你可以在 Mac 或者 Windows PC 上像安装其它应用一样来安装 Kitematic：下载安装包，运行安装程序。</p>
<p>##下载 Kit]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[baseimages]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/baseimages/"/>
    <id>http://yoursite.com/2015/12/08/docker/baseimages/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T06:57:00.631Z</updated>
    <content type="html"><![CDATA[<h1 id="创建一个基本镜像">创建一个基本镜像</h1><p>==================</p>
<p>你想创建你自己的<a href="../terms/image.md">基础镜像</a>？很好！</p>
<p>具体的过程会严重依赖于你想打包的Linux发行版。我们有下面一些例子供你参考。<br>同时，我们鼓励你通过提交推送请求来贡献你的新镜像。</p>
<h3 id="使用_tar_来创建一个完整的镜像">使用 tar 来创建一个完整的镜像</h3><p>通常，你要先运行一个可工作的发行版的机器，来打包一个基础镜像。虽然有一些<br>工具不是必需的，比如 Debian 的 Deboostrap，但是你还是可以用它来生成 Ubuntu<br>镜像。</p>
<p>下面的例子尽可能简单地创建一个 Ubuntu 基础镜像：</p>
<pre><code>$ sudo debootstrap raring raring &gt; /dev/null
$ sudo tar -C raring -c . | sudo docker <span class="keyword">import</span> - raring
a29c15f1bf7a
$ sudo docker run raring cat /etc/lsb-release
<span class="constant">DISTRIB_ID</span>=Ubuntu
<span class="constant">DISTRIB_RELEASE</span>=<span class="number">13.04</span>
<span class="constant">DISTRIB_CODENAME</span>=raring
<span class="constant">DISTRIB_DESCRIPTION</span>=<span class="string">"Ubuntu 13.04"</span>
</code></pre><p>在 Docker 的 GitHub 上，有更多的创建基础镜像的脚本示例：</p>
<ul>
<li><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-busybox.sh" target="_blank" rel="external">BusyBox</a></li>
<li>CentOS / Scientific Linux CERN (SLC) <a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-rinse.sh" target="_blank" rel="external">on Debian/Ubuntu</a> or on <a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-yum.sh" target="_blank" rel="external">CentOS/RHEL/SLC/etc</a>.</li>
<li><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh" target="_blank" rel="external">Debian / Ubuntu</a></li>
</ul>
<h3 id="使用_scratch_创建简单的基础镜像">使用 scratch 创建简单的基础镜像</h3><p>在 Docker 的注册中，有一个使用空的 tar 文件创建的特殊的版本库，叫 scratch ：</p>
<pre><code>$ tar cv --files-<span class="keyword">from</span> <span class="regexp">/dev/</span><span class="keyword">null</span> | docker <span class="keyword">import</span> - scratch
</code></pre><p>你可以用 <strong><em> docker pull </em></strong> 把它拉取下来。然后你就可以基于它来做新的最小<br>的容器了：</p>
<pre><code><span class="built_in">FROM</span> scratch
<span class="built_in">COPY</span> <span class="bash"><span class="literal">true</span>-asm /<span class="literal">true</span>
</span><span class="built_in">CMD</span> <span class="bash">[<span class="string">"/true"</span>]</span>
</code></pre><p>上面的 Dockerfile 来自外部的一个最小镜像：<a href="https://github.com/tianon/dockerfiles/tree/master/true" target="_blank" rel="external">tianon/true</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="创建一个基本镜像">创建一个基本镜像</h1><p>==================</p>
<p>你想创建你自己的<a href="../terms/image.md">基础镜像</a>？很好！</p>
<p>具体的过程会严重依赖于你想打包的Linux发行版]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用docker第一步]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/basics/"/>
    <id>http://yoursite.com/2015/12/08/docker/basics/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T06:57:10.985Z</updated>
    <content type="html"><![CDATA[<h1 id="使用docker第一步">使用docker第一步</h1><p>###检查你的Docker是否安装</p>
<p>本指南假设你已经完成了Docker的安装工作。检查你安装的Docker,运行以下命令：</p>
<pre><code><span class="comment"># Check that you have a working install</span>
<span class="variable">$ </span>docker info
</code></pre><p>如果你得到 <code>docker: command not found</code>，你可能没有完整的安装上Docker。</p>
<p>如果你得到 <code>/var/lib/docker/repositories: permission denied</code> ，那你可能没有权限访问你主机上的Docker。</p>
<p>为获得访问Docker权限可以直接在命令前加<code>sudo</code>，或者采取以下步骤授予权限：：</p>
<pre><code><span class="comment"># 如果还没有docker group就添加一个：</span>
<span class="variable">$ </span>sudo groupadd docker
<span class="comment"># 将用户加入该group内。然后退出并重新登录即可生效。</span>
<span class="variable">$ </span>sudo gpasswd -a <span class="variable">${</span><span class="constant">USER</span>} docker
<span class="comment"># 重启docker</span>
<span class="variable">$ </span>sudo service docker restart
</code></pre><p>请参考<a href="../install/">安装指南</a>安装。</p>
<p>###下载预构建镜像</p>
<pre><code><span class="comment"># Download an ubuntu image</span>
<span class="variable">$ </span>sudo docker pull ubuntu
</code></pre><p>这将从Docker Hub中查找到 <code>Ubuntu</code> 镜像，并且从Docker Hub中下载镜像到本地缓存中。</p>
<blockquote>
<p>提示：当镜像下载成功之后，你将会看到镜像的短id一个12字符的hash, <code>539c0211cd76: Download complete</code>，这些短的镜像IDS是完整ID的前12个字符。你可以使用 <code>docker inspect</code>和 <code>docker images --no-trunc=true</code>来查看完整ID。</p>
</blockquote>
<p>如果你使用OS X，你可以使用 <code>sudo</code>。</p>
<p>###运行交互shell</p>
<pre><code><span class="comment"># 在ubuntu镜像中使用运行交互shell,</span>
<span class="comment"># 分配一个控制台,分配输入输出流</span>
<span class="comment"># To detach the tty without exiting the shell,</span>
<span class="comment"># use the escape sequence Ctrl-p + Ctrl-q</span>
<span class="comment"># <span class="doctag">note:</span> This will continue to exist in a stopped state once exited (see "docker ps -a")</span>
$ sudo docker <span class="command">run</span> -i -t ubuntu /bin/bash
</code></pre><p>###绑定Docker到另外的主机/端口或者Unix socket</p>
<blockquote>
<p>提示：修改默认的 docker 进程绑定到一个tcp端口或者 Unix docker群组，这将会增加你的安全风险，允许非 root 用户获得 root 访问的主机权限。请确保你的 <code>docker</code> 权限。如果你绑定一个 <code>TCP</code> 端口任何人可以通过这个端口来访问你的 <code>Docker</code>,所以它不应该放在一个开放的网络中。</p>
</blockquote>
<p>使用 <code>-H</code> 标记可以使 <code>Docker</code> 来监听指定的IP和端口。默认情况下，它将监听 <code>unix:///var/run/docker.sock</code>只允许本地root用户连接。你可以将它设置为 <code>0.0.0.0:2375</code>或者指定的主机IP来给所有人访问权限。但是这不推荐，因为这样普通用户获得主机上运行进程的root权限。</p>
<p>同样，Docker 客户端可以使用 <code>-H</code> 来连接指定的主机端口。</p>
<p><code>-H</code> 使用以下格式来分配主机和端口</p>
<pre><code>tcp://[<span class="link_label">host</span>][<span class="link_reference">:port</span>]<span class="code">` or `</span>unix://path
</code></pre><p>举例：</p>
<ul>
<li>tcp://host:2375 -&gt; TCP connection on host:2375</li>
<li>unix://path/to/socket -&gt; Unix socket located at path/to/socket</li>
</ul>
<p><code>-H</code>，当输入为空的时候，将默认为相同的原始值，即没有<code>-H</code>输入。<br><code>-H</code>也接受短形式的TCP绑定。</p>
<pre><code>host[<span class="symbol">:port</span>]` <span class="keyword">or</span> `<span class="symbol">:port</span>
</code></pre><p>进程模式运行Docker</p>
<pre><code>$ sudo &lt;path to&gt;/docker -H <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5555</span> -d &amp;
</code></pre><p>下载<code>Ubuntu</code>镜像：</p>
<pre><code>sudo docker -H :<span class="number">5555</span> pull ubuntu
</code></pre><p>你可以使用多个<code>-H</code>标记，例如，你想要同时监听TCP和Unix socket。</p>
<pre><code><span class="comment"># 进程模式下运行docker</span>
<span class="variable">$ </span>sudo &lt;path to&gt;<span class="regexp">/docker -H tcp:/</span><span class="regexp">/127.0.0.1:2375 -H unix:/</span><span class="regexp">//var</span><span class="regexp">/run/docker</span>.sock -d &amp;
<span class="comment"># 使用默认的unix socker来下载ubuntu镜像</span>
<span class="variable">$ </span>sudo docker pull ubuntu
<span class="comment"># 或者使用TCP端口</span>
<span class="variable">$ </span>sudo docker -<span class="constant">H</span> <span class="symbol">tcp:</span>/<span class="regexp">/127.0.0.1:2375 pull ubuntu</span>
</code></pre><p>####开始一个长时间运行的工作进程</p>
<pre><code><span class="comment"># 开始一个非常有用的长时间运行的进程</span>
<span class="variable">$ </span><span class="constant">JOB=</span><span class="variable">$(</span>sudo docker run -d ubuntu /bin/sh -c <span class="string">"while true; do echo Hello world; sleep 1; done"</span>)

<span class="comment"># 到目前为止收集的输出工作</span>
<span class="variable">$ </span>sudo docker logs <span class="variable">$JOB</span>

<span class="comment"># 关闭这项进程</span>
<span class="variable">$ </span>sudo docker kill <span class="variable">$JOB</span>
</code></pre><p>####列出容器</p>
<pre><code><span class="variable">$ </span>sudo docker ps <span class="comment"># Lists only running containers</span>
<span class="variable">$ </span>sudo docker ps -a <span class="comment"># Lists all containers</span>
<span class="variable">$ </span>sudo docker ps -l <span class="comment"># List the last running container</span>
</code></pre><p>####控制容器</p>
<pre><code><span class="comment"># 开始一个新的容器</span>
<span class="variable">$ </span><span class="constant">JOB=</span><span class="variable">$(</span>sudo docker run -d ubuntu /bin/sh -c <span class="string">"while true; do echo Hello world; sleep 1; done"</span>)

<span class="comment"># 停止容器</span>
<span class="variable">$ </span>docker stop <span class="variable">$JOB</span>

<span class="comment"># 开始容器</span>
<span class="variable">$ </span>docker start <span class="variable">$JOB</span>

<span class="comment"># 重启容器</span>
<span class="variable">$ </span>docker restart <span class="variable">$JOB</span>

<span class="comment"># 杀死一个工作</span>
<span class="variable">$ </span>docker kill <span class="variable">$JOB</span>

<span class="comment"># 删除一个容器</span>
<span class="variable">$ </span>docker stop <span class="variable">$JOB</span> <span class="comment"># Container must be stopped to remove it</span>
<span class="variable">$ </span>docker rm <span class="variable">$JOB</span>
</code></pre><p>####绑定服务到TCP端口</p>
<pre><code><span class="comment">#让容器绑定4444端口，并通知netcat监听它。</span>
<span class="variable">$ </span><span class="constant">JOB=</span><span class="variable">$(</span>sudo docker run -d -p <span class="number">4444</span> <span class="symbol">ubuntu:</span><span class="number">12.10</span> /bin/nc -l <span class="number">4444</span>)

<span class="comment"># 查看容器转发的公共端口</span>
<span class="variable">$ </span><span class="constant">PORT=</span><span class="variable">$(</span>sudo docker port <span class="variable">$JOB</span> <span class="number">4444</span> | awk -<span class="constant">F:</span> <span class="string">'{ print $2 }'</span>)

<span class="comment"># 连接这个公共端口</span>
<span class="variable">$ </span>echo hello world | nc <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span> <span class="variable">$PORT</span>

<span class="comment"># 确认网络连接工作</span>
<span class="variable">$ </span>echo <span class="string">"Daemon received: $(sudo docker logs $JOB)"</span>
</code></pre><p>####提交（存储）一个容器的状态</p>
<p>保存你镜像容器的状态，这也就可以重复利用。</p>
<p>当你提交你的容器，仅仅是镜像和容器之间的不同，从创建到容器的当前状态来存储（作为差异）。你可以使用 <code>docker images</code>来查看已有镜像。</p>
<pre><code><span class="comment"># 使用新的名称来提交你的镜像</span>
<span class="variable">$ </span>sudo docker commit &lt;container_id&gt; &lt;some_name&gt;

<span class="comment"># 列出你的容器</span>
<span class="variable">$ </span>sudo docker images
</code></pre><p>你现在有一个镜像的状态，你可以创建新的实例。</p>
<p>####删除Docker镜像</p>
<p>首先要保证有权限对Docker镜像或者容器进行操作，具体做法参见进入前文安装部分。</p>
<pre><code><span class="comment"># 停止所有容器</span>
<span class="variable">$ </span>docker stop <span class="variable">$(</span>docker ps -a -q)

<span class="comment"># 删除指定镜像</span>
<span class="variable">$ </span>docker rmi <span class="variable">$image</span>

<span class="comment"># 删除无标示镜像，即id为&lt;None&gt;的镜像</span>
<span class="variable">$ </span>docker rmi <span class="variable">$(</span>docker images | grep <span class="string">"^&lt;none&gt;"</span> | awk <span class="string">"{print $3}"</span>)

<span class="comment"># 删除所有镜像</span>
<span class="variable">$ </span>docker rmi <span class="variable">$(</span>docker images -q)
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="使用docker第一步">使用docker第一步</h1><p>###检查你的Docker是否安装</p>
<p>本指南假设你已经完成了Docker的安装工作。检查你安装的Docker,运行以下命令：</p>
<pre><code><span class="com]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络配置]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/networking/"/>
    <id>http://yoursite.com/2015/12/08/docker/networking/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T06:57:37.703Z</updated>
    <content type="html"><![CDATA[<h1 id="网络配置">网络配置</h1><p>###TL;DR(原文的这些个符号，几个意思？)</p>
<p> <code>Dockers</code>启动后，会在宿主机上创建名为<code>docker0</code>的虚拟网卡，并给<code>docker0</code>随机分配一个宿主机没有使用，且满足RFC 1918定义的私有网络地址和子网段。举例来说，在我做这个步骤时，Docker分配的子网段是<code>172.17.42.1/16</code>，（最后那个16是掩码，表示该子网段可以会为宿主机和容器提供65534个地址）。容器的MAC地址根据IP地址生成，可以避免产生ARP冲突，它的范围从 02:42:ac:11:00:00 开始到 02:42:ac:11:ff:ff结束。</p>
<blockquote>
<p>注：本文档讨论的是 <code>docker</code> 的网络高级配置选项，初级用户无需阅读。如果想了解<code>docker</code>网络或容器间的连接方式，请查看<a href="../userguide/dockerlinks">docker用户指南</a></p>
</blockquote>
<p>当然， <code>docker0</code> 除了是虚拟网卡，还是负责其附属网卡间数据转发的虚拟网桥。<code>docker</code>每新建一个容器，就会同时创建了两个相对应的网卡接口，它们就像一条管道的两端：数据从一端进入（发送），从另一端出来（接受）。这两个网卡，一个被分配给新建的容器做<code>eth0</code>网卡，另一个被分配给宿主机，并取个类似于<code>vethAQI2QT</code>的唯一名称。就这样，通过绑定每个<code>veth*</code>网卡到<code>docker0</code>网桥，<code>Docker</code>在宿主机和各docker容器间搭建起了一个虚拟子网。</p>
<p>接下来，我们详细阐述如何使用<code>docker</code>参数或Linux网络命令来进一步修改、完善、或者完全替代<code>docker</code>的默认网络配置。</p>
<p>###参数快速指南</p>
<p>首先，来浏览<code>docker</code>的网络相关的命令行选项列表，下面的章节对一一进行介绍：</p>
<p>第一部分：只能在<code>docker</code>服务启动时使用使用的网络命令行选项，一旦运行，不能改变。</p>
<ul>
<li><code>-b BRIDGE</code> or <code>--bridge=BRIDGE</code> — 请查看<a href="#bridge-building">搭建私人网桥</a>小节</li>
<li><code>--bip=CIDR</code> — 请查看<a href="#docker0">定制 docker0</a>小节</li>
<li><code>-H SOCKET...</code> 或 <code>--host=SOCKET...</code>  —这个参数听起来像是在说容器网络，但实际上是在干另一件事：用来向<code>Docker</code>服务传递类似”运行容器”和“停止容器”的命令。</li>
<li><code>--icc=true|false</code> — 请查看<a href="#between-containers">容器间通信</a>小节小节</li>
<li><code>--ip=IP_ADDRESS</code> — 请查看<a href="#binding-port">绑定容器端口</a>小节</li>
<li><code>--ipv6=true|false</code> — 请查看<a href="#ipv6">IPV6</a>小节</li>
<li><code>--ip-forward=true|false</code> — 请查看<a href="#the-world">容器与外部通讯</a>小节</li>
<li><code>--iptables=true|false</code> — 请查看<a href="#between-containers">容器间通信</a>小节</li>
<li><code>--mtu=BYTES</code> — 请查看<a href="#docker0">定制 docker0</a>小节</li>
</ul>
<p>第二部分：下面两个参数，可以在启动时或者当 <code>docker run</code> 运行调用。如果启动时进行了设置，就会作为<code>docker run</code>运行时的初始默认值。</p>
<ul>
<li><code>--dns=IP_ADDRESS...</code>  — 请查看<a href="#dns">配置 DNS</a>小节</li>
<li><code>--dns-search=DOMAIN...</code>  — 请查看<a href="#dns">配置 DNS</a>小节</li>
</ul>
<p>第三部分：只能在<code>docker run</code>运行时调用的参数，特别用来定制容器的特性：</p>
<ul>
<li><code>-h HOSTNAME</code> or <code>--hostname=HOSTNAME</code>  — 请查看<a href="#dns">配置 DNS</a>小节和<a href="#containers-networking">如何设置容器的网络</a>小节</li>
<li><code>--link=CONTAINER_NAME:ALIAS</code>  — 请查看<a href="#dns">配置 DNS</a>小节和<a href="#between-containers">容器间通信</a>小节</li>
<li><code>--net=bridge|none|container:NAME_or_ID|host</code>  — 请查看<a href="#containers-networking">如何设置容器的网络</a>小节</li>
<li><code>--mac-address=MACADDRESS...</code>  — 请查看<a href="#containers-networking">如何设置容器的网络</a>小节</li>
<li><code>-p SPEC</code> or <code>--publish=SPEC</code>  — 请查看<a href="#binding-port">绑定容器端口</a>小节</li>
<li><code>-P</code> or <code>--publish-all=true|false</code>  — 请查看<a href="#binding-port">绑定容器端口</a>小节</li>
</ul>
<p>接下来，我们从浅到深的讲解上述题目。</p>
<p>###配置DNS</p>
<p>docker如何给每个容器提供独立的主机名和DNS配置呢？当然不是直接把主机名写到镜像里。docker巧妙的利用可刷新的虚拟文件覆盖了容器<code>/etc</code>目录下的三个关键文件。可以在容器内运行<code>mount</code>命令进行查看：</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="网络配置">网络配置</h1><p>###TL;DR(原文的这些个符号，几个意思？)</p>
<p> <code>Dockers</code>启动后，会在宿主机上创建名为<code>docker0</code>的虚拟网卡，并给<code>docker0</code]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 HTTPS 保护 Docker Socket 进程]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/https/"/>
    <id>http://yoursite.com/2015/12/08/docker/https/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T06:57:26.060Z</updated>
    <content type="html"><![CDATA[<h1 id="使用_HTTPS_保护_Docker_Socket_进程">使用 HTTPS 保护 Docker Socket 进程</h1><p>默认情况下，Docker 使用的是无网络环境的 Unix Socket。它可以使用 HTTP Socket 进行通信。</p>
<p>如果你需要 Docker 使用安全的方式来进行网络通信，你可以使用 <code>tlsverify</code> 标识来启用 TLS，并使用 <code>tlscacert</code> 标识来指定 CA 证书。</p>
<blockquote>
<p>警告：使用 TLS 和管理 CA 证书是一个高级话题。在投入生成环境使用之前，你需要自行熟悉了解 OpenSSL，X509 和 TLS 。</p>
<p>警告：这些 TLS 指令只能生成在 Linux 上工作的证书，Mac OSX 附带的 OpenSSL 版本与 Docker 所需要使用的证书不兼容。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="使用_HTTPS_保护_Docker_Socket_进程">使用 HTTPS 保护 Docker Socket 进程</h1><p>默认情况下，Docker 使用的是无网络环境的 Unix Socket。它可以使用 HTTP Socket 进行通信。</p>
<p]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using Supervior with Docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/SupervisorwithDocker/"/>
    <id>http://yoursite.com/2015/12/08/docker/SupervisorwithDocker/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T06:57:46.932Z</updated>
    <content type="html"><![CDATA[<h1 id="Using_Supervior_with_Docker">Using Supervior with Docker</h1><p>注意：如果你不喜欢使用sudo，那么你可以看看<a href="http://docs.docker.com/installation/binaries/#dockergroup" target="_blank" rel="external">Giving non-root access</a></p>
<p>传统上的docker容器中一次只能运行一个进程，例如一次只运行一个Apache守护进程或SSH服务器守护进程一个进程。你经常遇到需要<br>在一个容器中运行多个进程的情形。有许多方法可以实现这一点，从使用简单的bash脚本来运行的<code>CMD</code>指令到安装进程管理工具。 </p>
<p>在这个例子中，我们将要利用进程管理工具，<a href="http://supervisord.org/" target="_blank" rel="external"><code>Supervior</code></a>，来管理我们容器中的多个进程。使用Supervior使我们能够更好地控制，管理，<br>和重新启动我们想要运行的进程。为了证明这一点，我们接下来要安装并管理的SSH服务进程和一个Apache守护进程。 </p>
<h2 id="创建Dockerfile">创建Dockerfile</h2><p>让我们先创建一个基本的<code>Dockerfile</code>来创建我们的新镜像。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">13.04</span></span><br><span class="line">MAINTAINER examples@docker.com</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu precise main universe"</span> &gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br></pre></td></tr></table></figure>
<h2 id="安装Supervisor">安装Supervisor</h2><p>现在，我们可以安装我们的SSH和Apache，以及Supervisor在我们的容器中。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get install -y openssh-server apache2 supervisor</span><br><span class="line">RUN mkdir -p /var/run/sshd</span><br><span class="line">RUN mkdir -p /var/<span class="built_in">log</span>/supervisor</span><br></pre></td></tr></table></figure>
<p>这里我们组装了一个包含Openssh-server，Apache2和supervisor（它提供了超级守护进程）的封装包。我们也创建了用来运行<br>我们SSH和Supervisor的两个新目录</p>
<h2 id="添加Supervisor的配置文件">添加Supervisor的配置文件 </h2><p>现在，让我们为Supervisor添加一个配置文件。默认的文件名为<code>supervisord.conf</code>，位于<code>/etc/supervisor/conf.d/</code>。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>让我们来看看supervisord.conf文件。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[supervisord]</span><br><span class="line">nodaemon=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[program:sshd]</span><br><span class="line"><span class="built_in">command</span>=/usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">[program:apache2]</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">"source /etc/apache2/envvars &amp;&amp; exec /usr/sbin/apache2 -DFOREGROUND"</span></span><br></pre></td></tr></table></figure>
<p>该<code>supervisord.conf</code>配置文件包含了配置Supervisor的指令和Supervisor用来管理进程的指令。第一部分<code>[supervisord]</code>为Supervisor本身的配置。<br>我们使用一个<code>nodaemon</code>指令，来告诉Supervisor以交互方式而非以后台进程方式运行。 </p>
<p>接下来的两个部分用来管理我们要控制的服务。每个部分控制一个单独的进程。该部分包含一个<code>command</code>指令，指定用什么命令来启动每个过程。 （<em>译者注：要运行什么指令按照相同格式添加即可</em>）</p>
<h2 id="开放端口以及运行Supervisor">开放端口以及运行Supervisor </h2><p>现在，让我们开放一些需要口，并指定当容器启动时要运行的CMD指令来结束<code>Dockerfile</code>文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE <span class="number">22</span> <span class="number">80</span></span><br><span class="line">CMD [<span class="string">"/usr/bin/supervisord"</span>]</span><br></pre></td></tr></table></figure>
<p>在这里，当我们的容器启动时，会自动开放了容器的22和80端口，同时运行<code>/usr/bin/supervisord</code>命令。</p>
<h2 id="创建我们自己的镜像">创建我们自己的镜像</h2><p>现在，我们可以创建我们的新镜像。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t &lt;yourname&gt;/supervisord .</span><br></pre></td></tr></table></figure>
<h2 id="启动我们的Supervisor容器">启动我们的Supervisor容器</h2><p>一旦我们创建了一个镜像，我们就可以从它启动一个容器。 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -p <span class="number">22</span> -p <span class="number">80</span> -t -i &lt;yourname&gt;/supervisord</span><br><span class="line"><span class="number">2013</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">22</span>,<span class="number">312</span> CRIT Supervisor running as root (no user <span class="keyword">in</span> config file)</span><br><span class="line"><span class="number">2013</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">22</span>,<span class="number">312</span> WARN Included extra file <span class="string">"/etc/supervisor/conf.d/supervisord.conf"</span> during parsing</span><br><span class="line"><span class="number">2013</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">22</span>,<span class="number">342</span> INFO supervisord started with pid <span class="number">1</span></span><br><span class="line"><span class="number">2013</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">23</span>,<span class="number">346</span> INFO spawned: <span class="string">'sshd'</span> with pid <span class="number">6</span></span><br><span class="line"><span class="number">2013</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">23</span>,<span class="number">349</span> INFO spawned: <span class="string">'apache2'</span> with pid <span class="number">7</span></span><br><span class="line">. . .</span><br></pre></td></tr></table></figure>
<p>我们已经使用<code>docker run</code>命令以交互方式启动一个新的容器。该容器已运行Supervisor，并启动了SSH和Apache后台进程。<br>我们已经指定了<code>-p</code>参数开放了端口22和80。通过这种方式我们可以确认我们开放的端口，并且通过这些端口连接到SSH和Apache后台进程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Using_Supervior_with_Docker">Using Supervior with Docker</h1><p>注意：如果你不喜欢使用sudo，那么你可以看看<a href="http://docs.docker.com/installation/]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[windows
安装 docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/windows/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/windows/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:15:37.642Z</updated>
    <content type="html"><![CDATA[<p>#windows</p>
<blockquote>
<p>提示：Docker 已经在windows7.1和windows 8上通过测试，当然它也可以在低版本的windows上使用。但是你的处理器必须支持硬件虚拟化。</p>
</blockquote>
<p>Docker 引擎使用的是Linux内核特性，所以我们需要在 Windows 上使用一个轻量级的虚拟机 (VM) 来运行 Docker。我们使用 Windows的Docker客户端来控制 Docker 虚拟化引擎的构建、运行和管理 。</p>
<p>为了简化这个过程，我们设计了一个叫 <a href="https://github.com/boot2docker/boot2docker" target="_blank" rel="external">Boot2Docker</a> 的应用程序，你可以通过它来安装虚拟机和运行 Docker。</p>
<p>虽然你使用的是 Windows 的 Docker 客户端，但是 docker 引擎容器依然是运行在 Linux 宿主主机上（现在是通过Virtual box）。直到我们开发了 windows 版本的 Docker 引擎，你只需要在你的 Windows 主机上启动一个 Linux 容器。</p>
<p>##安装</p>
<ol>
<li><p>下载最新版本的<a href="https://github.com/boot2docker/windows-installer/releases/latest" target="_blank" rel="external">Docker for Windows Installer</a></p>
</li>
<li><p>运行安装文件，它将会安装virtualbox、MSYS-git boot2docker Linux镜像和Boot2Docker的管理工具。</p>
<p> <img src="http://widuu.u.qiniudn.com/windows_docker.png" alt="docker windows软件安装"></p>
</li>
<li><p>从桌面上或者Program Files中找到Boot2Docker for Windows，运行 <code>Boot2Docker Start</code> 脚本。这个脚本会要求你输入 ssh 密钥密码 - 可以简单点（但是起码看起来比较安全），然后只需要按[Enter]按钮即可。</p>
</li>
<li><p><code>Boot2Docker Start</code> 将启动一个 Unix shell 来配置和管理运行在虚拟主机中的 Docker，运行 <code>docker version</code> 来查看它是否正常工作。</p>
</li>
</ol>
<p><img src="../images/windows-boot2docker-start.png" alt="windows docker run"></p>
<p>###运行 Docker</p>
<blockquote>
<p>注意：如果你使用的是一个远程的 Docker 进程，像 <code>Boot2docker</code> ，你就不需要像前边的文档实例中那样在输入 Docker 命令之前输入 <code>sudo</code>。</p>
</blockquote>
<p><strong>Boot2docker start</strong> 将会自动启动一个 shell 命令框并配置好环境变量，以便您可以马上使用 Docker ：</p>
<p>让我们尝试运行 <code>hello-world</code> 例子。 运行：</p>
<pre><code>$ docker <span class="command">run</span> hello-world
</code></pre><p>这将会下载一个非常小的 <code>hello-world</code> 镜像，并且打印出 <code>Hello from Docker.</code> 信息。</p>
<p>###使用 Windows 的命令行(cmd.exe) 来管理运行 Docker</p>
<p>启动一个 Windows 命令行（cmd.exe）.</p>
<p>运行 Boot2docker 命令，这需要你的 Windows PATH环境变量中包含了 <code>ssh.exe</code>。因此我们需要将安装的 Git 的 bin 目录 （其中包含了 ssh.exe） 配置到我们的 <code>%PATH%</code> 环境变量中，运行如下命令：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">PATH</span>=%<span class="keyword">PATH</span>%;</span>"c:\Program Files (x86)\Git\bin"
</code></pre><p>现在，我们可以运行 <code>boot2docker start</code> 命令来启动 Boot2docker 虚拟机。（如果有虚拟主机不存在的错误提示，你需要运行 <code>boot2docker init</code> 命令）。复制上边的指令到 cmd.exe 来设置你的 windows 控制台的环境变量，然后你就可以运行 docker 命令了，譬如 <code>docker ps</code> :</p>
<p><img src="../images/windows-boot2docker-cmd.png" alt="docker cmd.exe"></p>
<h3 id="PowerShell_中使用_Docker">PowerShell 中使用 Docker</h3><p>启动 PowerShell，你需要将 <code>ssh.exe</code> 添加到你的 PATH 中。</p>
<pre><code><span class="variable">$Env</span>:Path = <span class="string">"${Env:Path};c:\Program Files (x86)\Git\bin"</span>
</code></pre><p>之后，运行 <code>boot2docker start</code> 命令行，它会打印出  PowerShell 命令，这些命令是用来设置环境变量来连接运行在虚拟机中 Docker 的。运行这些命令，然后你就可以运行 docker 命令了，譬如 <code>docker ps</code> :</p>
<p><img src="../images/windows-boot2docker-powershell.png" alt="Powershell Docker"></p>
<blockquote>
<p>提示:你可以使用 <code>boot2docker shellinit | Invoke-Expression</code> 来设置你的环境变量来代替复制粘贴 Powershell 命令。</p>
</blockquote>
<p>##进一步的细节</p>
<p>Boot2Docker 管理工具提供了如下几个命令：</p>
<pre><code>$ boot2docker
Usage: boot2docker.exe <span class="annotation">[&lt;options&gt;]</span> {help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|shellinit|delete|download|upgrade|version} <span class="annotation">[&lt;args&gt;]</span>
</code></pre><p>###升级</p>
<ul>
<li>下载最新的 <a href="https://github.com/boot2docker/windows-installer/releases/tag/v1.5.0" target="_blank" rel="external">Docker for Windows Installer</a></li>
<li>运行安装程序，这将升级 Boot2Docker 管理工具</li>
<li><p>打开终端输入如下的命令来升级你现有的虚拟机：</p>
<p>  $ boot2docker stop<br>  $ boot2docker download<br>  $ boot2docker start</p>
</li>
</ul>
<p>###容器端口重定向</p>
<p>boot2Docker的默认用户是 <code>docker</code> 密码是 <code>tcuser</code>。 </p>
<p>最新版本的 boot2docker 可以设置网络适配器来给容器提供端口访问。</p>
<p>如你运行一个暴露内部端口的容器</p>
<pre><code>docker run --rm -<span class="tag">i</span> -t -<span class="tag">p</span> <span class="number">80</span>:<span class="number">80</span> nginx
</code></pre><p>当你需要使用一个IP地址来访问 Nginx 服务器，你可以使用如下命令来查看 ip。</p>
<pre><code>$ <span class="keyword">boot2docker </span><span class="literal">ip</span>
</code></pre><p>通常情况下，是192.168.59.103,但是它可以通过 virtualbox 的 dhcp 来改变。</p>
<p>更多细节信息，请查看<a href="http://boot2docker.io/" target="_blank" rel="external">Boot2Docker site</a></p>
<p>###使用PUTTY登陆来代替CMD命令行</p>
<p>Boot2Docker使用 <code>%HOMEPATH%\.ssh</code> 目录来生成你的共有和私有密钥。同样登陆的时候你也需要使用这个目录下的私有密钥。</p>
<p>这个私有密钥需要转换成 PuTTY 所需要的格式。</p>
<p>你可以使用 <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">puttygen</a>来生成，具体操作如下:</p>
<ol>
<li><p>打开 <code>puttygen.exe</code> 找到（”File”-&gt;”Load”）按钮来加载 %HOMEPATH%.ssh\id_boot2docker 私有密钥文件。</p>
</li>
<li><p>点击<code>&quot;Save Private Key&quot;</code>按钮。</p>
</li>
<li><p>在PUTTY中使用刚才保存的文件来登陆 docker@127.0.0.1:2022 </p>
</li>
</ol>
<p>##参考</p>
<p>如果你已经运行 Docker 主机或者你不希望使用 <code>Boot2docker</code> 安装，你可以安装 docker.exe 使用非官方的包管理器 Chocolately。了解更多新，请查看 <a href="https://chocolatey.org/packages/docker" target="_blank" rel="external">Docker package on Chocolatey</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#windows</p>
<blockquote>
<p>提示：Docker 已经在windows7.1和windows 8上通过测试，当然它也可以在低版本的windows上使用。但是你的处理器必须支持硬件虚拟化。</p>
</blockquote>
<p>Docker 引]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu
安装 docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/ubuntu/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/ubuntu/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:15:45.274Z</updated>
    <content type="html"><![CDATA[<h1 id="Ubuntu">Ubuntu</h1><p>Docker 支持以下的 Ubuntu 版本</p>
<ul>
<li>Ubuntu Trusty 14.04 (LTS) (64-bit)</li>
<li>Ubuntu Precise 12.04 (LTS) (64-bit)</li>
<li>Ubuntu Raring 13.04 and Saucy 13.10 (64 bit)</li>
</ul>
<p>这个页面可以指导你安装 Docker 包管理器，并了解其中的安装机制。通过下边的安装方式可以确保你获取的是最新版本的 Docker。如果你想要使用 ‘Ubuntu包管理器’ 安装，你可以查阅你的 Ubuntu 文档。</p>
<p>###前提条件</p>
<p>Docker 需要在64位版本的Ubuntu上安装。此外，你还需要保证你的 Ubuntu 内核的最小版本不低于 3.10，其中3.10 小版本和更新维护版也是可以使用的。</p>
<p>在低于3.10版本的内核上运行 Docker 会丢失一部分功能。在这些旧的版本上运行 Docker 会出现一些BUG，这些BUG在一定的条件里会导致数据的丢失，或者报一些严重的错误。</p>
<p>打开控制台使用 <code>uname -r</code>命令来查看你当前的内核版本。</p>
<pre><code>$ uname -r 
<span class="number">3.11</span><span class="number">.0</span>-<span class="number">15</span>-generic
</code></pre><blockquote>
<p>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的Ubuntu版本是否支持 Docker 。</p>
</blockquote>
<p>###Trusty 14.04</p>
<p> 这个版本不需要考虑前提条件</p>
<p>###Precise 12.04 (LTS)</p>
<p>对于Ubuntu Precise版本, 安装Docker需要内核在3.13及以上版本。如果你的内核版本低于3.13你需要升级你的内核。 通过下边的表，请查阅下边的表来确认你的环境需要哪些包。</p>
<p> <table class="tg"> <tr> <td class="tg-031">linux-image-generic-lts-trusty</td> <td class="tg-031e">Generic<br>Linux kernel image. This kernel has AUFS built in. This is required to run<br>Docker.</td> </tr> <tr> <td class="tg-031">linux-headers-generic-lts-trusty</td></tr></table></p>
<p><td class="tg-031e">Allows packages such as ZFS and VirtualBox guest additions<br>which depend on them. If you didn’t install the headers for your existing<br>kernel, then you can skip these headers for the”trusty” kernel. If you’re<br>unsure, you should include this package for safety.</td>  <tr> <td class="tg-031">xserver-xorg-lts-trusty</td> <td class="tg-031e" rowspan="2">Optional in non-graphical environments without Unity/Xorg.<br><i>Required</i> when running Docker on machine with a graphical environment.</td></tr></p>
<p></p><p>To learn more about the reasons for these packages, read the installation<br>instructions for backported kernels, specifically the <a href="https://wiki.ubuntu.com/Kernel/LTSEnablementStack" target="_blank">LTS<br>Enablement Stack</a> &mdash; refer to note 5 under each version.</p> <p></p>
<p><tr> <td class="tg-031">libgl1-mesa-glx-lts-trusty</td> </tr>  &nbsp;</p>
<p>通过下边的操作来升级你的内核和安装额外的包</p>
<ol>
<li><p>在Ubuntu系统中打开命令行控制台。</p>
</li>
<li><p>升级你的包管理器</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span>
</code></pre></li>
<li><p>安装所有必须和可选的包</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> install linux-<span class="built_in">image</span>-generic-lts-trusty
</code></pre><p> 根据个人的系统环境来选择是否安装更多的包（前表列出）。</p>
</li>
<li><p>重启系统</p>
<pre><code><span class="variable">$ </span>sudo reboot
</code></pre></li>
<li><p>等到系统重启成功之后，查看<a href="#Ubuntu安装Docker">安装Docker</a></p>
</li>
</ol>
<p>###Saucy 13.10 (64 bit)</p>
<p>Docker 使用 AUFS 作为默认的后端存储方式，如果你之前没有安装 AUFS ，Docker 在安装过程中会自动添加。</p>
<p>##Ubuntu安装Docker</p>
<p>首先要确认你的 Ubuntu 版本是否符合安装 Docker 的前提条件。如果没有问题，你可以通过下边的方式来安装 Docker ：</p>
<ol>
<li><p>使用具有<code>sudo</code>权限的用户来登录你的Ubuntu。</p>
</li>
<li><p>查看你是否安装了<code>wget</code></p>
<pre><code>$ <span class="built_in">which</span> wget
</code></pre><p> 如果<code>wget</code>没有安装，先升级包管理器，然后再安装它。</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> $ sudo apt-<span class="built_in">get</span> install wget
</code></pre></li>
<li><p>获取最新版本的 Docker 安装包</p>
<pre><code>$ wget -qO- http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span>
</code></pre><p> 系统会提示你输入<code>sudo</code>密码，输入完成之后，就会下载脚本并且安装Docker及依赖包。</p>
</li>
<li><p>验证 Docker 是否被正确的安装</p>
<pre><code>$ sudo docker <span class="command">run</span> hello-world
</code></pre><p>  上边的命令会下载一个测试镜像，并在容器内运行这个镜像。</p>
</li>
</ol>
<p>##Ubuntu Docker可选配置</p>
<p>这部分主要介绍了 Docker 的可选配置项，使用这些配置能够让 Docker 在 Ubuntu 上更好的工作。</p>
<ul>
<li>创建 Docker 用户组</li>
<li>调整内存和交换空间(swap accounting) </li>
<li>启用防火墙的端口转发(UFW)</li>
<li>为 Docker 配置DNS服务</li>
</ul>
<p>###创建 Docker 用户组</p>
<p>docker 进程通过监听一个 Unix Socket 来替代 TCP 端口。在默认情况下，docker 的 Unix Socket属于<code>root</code>用户，当然其他用户可以使用<code>sudo</code>方式来访问。因为这个原因， docker 进程就一直是<code>root</code>用户运行的。</p>
<p>为了在使用 <code>docker</code> 命令的时候前边不再加<code>sudo</code>，我们需要创建一个叫 <code>docker</code> 的用户组，并且为用户组添加用户。然后在 <code>docker</code> 进程启动的时候，我们的 <code>docker</code> 群组有了 Unix Socket 的所有权，可以对 Socket 文件进行读写。</p>
<blockquote>
<p>注意：<code>docker</code> 群组就相当于root用户。有关系统安全影响的细节，请查看 <a href="">Docker 进程表面攻击细节</a></p>
</blockquote>
<p>创建 <code>docker</code> 用户组并添加用户</p>
<ol>
<li><p>使用具有<code>sudo</code>权限的用户来登录你的Ubuntu。</p>
<p> 在这过程中，我们假设你已经登录了Ubuntu。</p>
</li>
<li><p>创建 <code>docker</code> 用户组并添加用户。</p>
<pre><code>$ sudo usermod <span class="operator">-a</span>G docker ubuntu
</code></pre></li>
<li><p>注销登录并重新登录</p>
<p> 这里要确保你运行用户的权限。</p>
</li>
<li><p>验证 <code>docker</code> 用户不使用 <code>sudo</code> 命令开执行 <code>Docker</code></p>
<pre><code>$ docker <span class="command">run</span> hello-world
</code></pre></li>
</ol>
<p>###调整内存和交换空间(swap accounting)</p>
<p>当我们使用 Docker 运行一个镜像的时候，我们可能会看到如下的信息提示：</p>
<pre><code><span class="label">WARNING: </span>Your kernel does not support cgroup swap limit. WARNING: Your
kernel does not support swap limit capabilities. Limitation discarded.、
</code></pre><p>为了防止以上错误信息提示的出现，我们需要在系统中启用内存和交换空间。我们需要修改系统的 GUN GRUB (GNU GRand Unified Bootloader) 来启用内存和交换空间。开启方法如下：</p>
<ol>
<li><p>使用具有<code>sudo</code>权限的用户来登录你的Ubuntu。</p>
</li>
<li><p>编辑 <code>/etc/default/grub</code> 文件</p>
</li>
<li><p>设置 <code>GRUB_CMDLINE_LINUX</code> 的值如下：</p>
<pre><code><span class="setting">GRUB_CMDLINE_LINUX=<span class="value"><span class="string">"cgroup_enable=memory swapaccount=1"</span></span></span>
</code></pre></li>
<li><p>保存和关闭文件 </p>
</li>
<li><p>更新 GRUB</p>
<pre><code><span class="variable">$ </span>sudo update-grub
</code></pre></li>
<li><p>重启你的系统。</p>
</li>
</ol>
<h3 id="允许UFW端口转发">允许UFW端口转发</h3><p>当你在运行 <code>docker</code> 的宿主主机上使用UFW（简单的防火墙）。你需要做一些额外的配置。Docker 使用桥接的方式来管理网络。默认情况下，UFW 过滤所有的端口转发策略。因此，当在UFW启用的情况下使用 <code>docker</code> ,你必须适当的设置UFW的端口转发策略。</p>
<p>默认情况下UFW是过滤掉所有的入站规则。如果其他的主机能够访问你的容器。你需要允许Docker的默认端口(2375)的所有连接。</p>
<p>设置 UFW 允许Docker 端口的入站规则：</p>
<ol>
<li>使用具有<code>sudo</code>权限的用户来登录你的Ubuntu。</li>
<li><p>验证UFW的安装和启用状态</p>
<pre><code><span class="variable">$ </span>sudo ufw status
</code></pre></li>
<li><p>打开和编辑<code>/etc/default/ufw</code>文件 </p>
<pre><code>$ sudo nano <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/ufw</span>
</code></pre></li>
<li><p>设置 <code>DEFAULT_FORWARD_POLICY</code> 如下：</p>
<p> DEFAULT_FORWARD_POLICY=”ACCEPT”</p>
</li>
<li><p>保存关闭文件。</p>
</li>
<li><p>重新加载UFW来使新规则生效。</p>
<pre><code><span class="variable">$ </span>sudo ufw reload
</code></pre></li>
<li><p>允许 Docker 端口的入站规则</p>
<pre><code>$ sudo ufw allow <span class="number">2375</span>/tcp
</code></pre></li>
</ol>
<p>###Docker 配置 DNS 服务</p>
<p>无论是Ubuntu还是Ubuntu 桌面繁衍版在系统运行的时候都是使用<code>/etc/resolv.conf</code>配置文件中的127.0.0.1作为域名服务器(nameserver)。NetworkManager设置dnsmasq使用真实的dns服务器连接，并且设置 /etc/resolv.conf的域名服务为127.0.0.1。</p>
<p>在桌面环境下使用这些配置来运行 docker 容器的时候， Docker 用户会看到如下的警告：</p>
<pre><code><span class="label">WARNING: </span>Local (127.0.0.1) DNS resolver found in resolv.conf and containers
can't use it. Using default external servers : [8.8.8.8 8.8.4.4]
</code></pre><p>该警告是因为 Docker 容器不能使用本地的DNS服务。相反 Docker 使用一个默认的外部域名服务器。</p>
<p>为了避免此警告，你可以给 Docker 容器指定一个DNS服务器。或者你可以禁用 NetworkManager 的 <code>dnsmasq</code>。不过当禁止 <code>dnsmasq</code> 可能使某些网络的DNS解析速度变慢。</p>
<p>为 Docker 指定一个DNS服务器</p>
<ol>
<li><p>使用具有<code>sudo</code>权限的用户来登录你的Ubuntu。</p>
</li>
<li><p>打开并编辑 <code>/etc/default/docker</code></p>
<pre><code>$ sudo nano <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/docker</span>
</code></pre></li>
<li><p>添加设置 </p>
<pre><code><span class="setting">DOCKER_OPTS=<span class="value"><span class="string">"--dns 8.8.8.8"</span></span></span>
</code></pre><p> 使用8.8.8.8替换如192.168.1.1的本地DNS服务器。你可以指定多个DNS服务器，多个DNS服务器使用空格分割例如</p>
<pre><code>--dns <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> --dns <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>
</code></pre><blockquote>
<p>警告:如果你正在使用的电脑需要连接到不同的网络,一定要选择一个公共DNS服务器。</p>
</blockquote>
</li>
<li><p>保存关闭文件。 </p>
</li>
<li><p>重启 Docker 进程 </p>
<pre><code><span class="variable">$ </span>sudo restart docker  
</code></pre></li>
</ol>
<p>或者，作为替代先前的操作过程，禁止NetworkManager中的<code>dnsmasq</code>(这样会使你的网络变慢)</p>
<ol>
<li><p>打开和编辑 <code>/etc/default/docker</code></p>
<pre><code><span class="variable">$ </span>sudo nano /etc/<span class="constant">NetworkManager</span>/<span class="constant">NetworkManager</span>.conf
</code></pre></li>
<li><p>注释掉 dns = dsnmasq：</p>
<pre><code><span class="attribute">dns</span>=<span class="string">dnsmasq</span>
</code></pre></li>
<li><p>保存关闭文件</p>
</li>
<li><p>重启NetworkManager 和 Docker</p>
<pre><code><span class="variable">$ </span>sudo restart network-manager <span class="variable">$ </span>sudo restart docker
</code></pre></li>
</ol>
<p>###升级Docker</p>
<p>在<code>wget</code>的时候使用<code>-N</code>参数来安装最新版本的Docker：</p>
<pre><code>$ wget -<span class="keyword">N</span> http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Ubuntu">Ubuntu</h1><p>Docker 支持以下的 Ubuntu 版本</p>
<ul>
<li>Ubuntu Trusty 14.04 (LTS) (64-bit)</li>
<li>Ubuntu Precise 12.04 (LTS) (64]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IBM SoftLayer
安装 docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/softlayer/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/softlayer/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:15:53.416Z</updated>
    <content type="html"><![CDATA[<h1 id="IBM_SoftLayer">IBM SoftLayer</h1><p>1.创建一个 <a href="https://www.softlayer.com/cloud-servers/" target="_blank" rel="external">IBM SoftLayer 账户</a>.</p>
<p>2.登陆到 <a href="https://control.softlayer.com/" target="_blank" rel="external">SoftLayer Customer Portal</a>.</p>
<p>3.在 <code>Devices</code> 菜单中选择<a href="https://control.softlayer.com/devices" target="_blank" rel="external">设备列表</a>.</p>
<p>4.点击位于菜单条下方、窗口顶部右侧的 <em>Order Devices</em>.</p>
<p>5.在 <code>Virtual Server</code> 下点击 <a href="https://manage.softlayer.com/Sales/orderHourlyComputingInstance" target="_blank" rel="external">Hourly</a>.</p>
<p>6.创建一个新的 SoftLayer Virtual Server Instance (VSI)，使用全部字段的默认值:</p>
<ul>
<li><code>Datacenter</code> 的部署位置</li>
<li>Ubuntu Linux 12.04 LTS Precise Pangolin - 最小化安装的64位系统</li>
</ul>
<p>7.点击底部右侧的 <em>Continue Your Order</em>.</p>
<p>8.填写 VSI 主机名和域名。</p>
<p>9.填写用户所需的元数据和订单。</p>
<p>10.接下来请继续阅读 <a href="https://docs.docker.com/installation/ubuntulinux/#ubuntu-linux" target="_blank" rel="external">Ubuntu</a>.</p>
<p>###What next</p>
<p>更多信息请阅读<a href="../userguide/README.md">用户指南</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="IBM_SoftLayer">IBM SoftLayer</h1><p>1.创建一个 <a href="https://www.softlayer.com/cloud-servers/" target="_blank" rel="external">IBM Sof]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Red Hat Enterprise Linux 安装 Docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/redhat/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/redhat/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:11:43.079Z</updated>
    <content type="html"><![CDATA[<h1 id="Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux</h1><p>以下是支持 Docker 的 RHEL 版本：</p>
<ul>
<li><a href="#red-hat-enterprise-linux-7-installation"><em>Red Hat Enterprise Linux 7 (64-bit)</em></a></li>
<li><a href="#red-hat-enterprise-linux-6.5-installation"><em>Red Hat Enterprise Linux 6.5 (64-bit)</em></a> 或更高版本</li>
</ul>
<h2 id="内核支持">内核支持</h2><p>如果你的 RHEL 运行的是发行版内核。那就仅支持通过 <em>extras</em> 渠道或者 EPEL 包来安装 Docker。如果你打算在非发行版本的内核上运行 Docker ，内核的改动可能会导致出错</p>
<h2 id="Red_Hat_Enterprise_Linux_7_installation">Red Hat Enterprise Linux 7 installation</h2><p><strong>Red Hat Enterprise Linux 7 （64位）</strong> <a href="https://access.redhat.com/site/products/red-hat-enterprise-linux/docker-and-containers" target="_blank" rel="external">自带Docker</a>. 你可以在<a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/7.0_Release_Notes/chap-Red_Hat_Enterprise_Linux-7.0_Release_Notes-Linux_Containers_with_Docker_Format.html" target="_blank" rel="external">发行日志</a>中找到概述和指南。</p>
<p>Docker 包含在 <strong>extras</strong> 镜像源中，使用下面的方法可以安装 Docker:</p>
<ol>
<li><p>启用 <strong>extras</strong> 镜像源:</p>
<pre><code>$ sudo subscription-manager repos <span class="comment">--enable=rhel-7-server-extras-rpms</span>
</code></pre></li>
<li><p>安装 Docker :</p>
<pre><code>$ sudo yum <span class="keyword">install</span> docker 
</code></pre></li>
</ol>
<p>如果你是RHEL客户，更多的 RHEL-7 安装、配置和<a href="https://access.redhat.com/site/articles/881893" target="_blank" rel="external">用户指南</a>可以在<a href="https://access.redhat.com/" target="_blank" rel="external">客户中心</a>中找到。</p>
<p>请继续阅读 <a href="#starting-the-docker-daemon"> 启动 Docker 进程 </a>.</p>
<h2 id="Red_Hat_Enterprise_Linux_6-5_installation">Red Hat Enterprise Linux 6.5 installation</h2><p>你需要在 <strong>64位</strong> 的 <a href="https://access.redhat.com/site/articles/3078#RHEL6" target="_blank" rel="external">RHEL 6.5</a> 或更高的版本上来安装 Docker，Docker 工作需要特定的内核补丁, 因此 RHEL 的内核版本应为 2.6.32-431 或者更高。</p>
<p>Docker 已经包含在 RHEL 的 EPEL 源中。该源是 Extra Packages for Enterprise Linux (EPEL) 的一个额外包，社区中正在努力创建和维护相关镜像。</p>
<h2 id="内核支持-1">内核支持</h2><p>如果你的 RHEL 运行的是发行版内核。那就仅支持通过 <em>extras</em> 渠道或者 EPEL 包来安装 Docker。如果你打算在非发行版本的内核上运行 Docker ，内核的改动可能会导致出错</p>
<blockquote>
<p><strong>Warning</strong>:<br>Please keep your system up to date using <code>yum update</code> and rebooting<br>your system. Keeping your system updated ensures critical security<br> vulnerabilities and severe bugs (such as those found in kernel 2.6.32)<br>are fixed.</p>
</blockquote>
<p>首先，你需要安装EPEL镜像源，请查看 <a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" target="_blank" rel="external">EPEL installation instructions</a>.</p>
<p>在EPEL中已经提供了 <code>docker-io</code> 包</p>
<p>如果你安装了(不相关)的 Docker 包，它将与 <code>docker-io</code> 冲突。在安装 <code>docker-io</code> 之前，请先卸载 Docker</p>
<p>下一步，我们将要在我们的主机中安装 Docker,也就是 <code>docker-io</code> 包:</p>
<pre><code>$ sudo yum -y <span class="keyword">install</span> docker-io
</code></pre><p>更新<code>docker-io</code>包:</p>
<pre><code><span class="variable">$ </span>sudo yum -y update docker-io
</code></pre><p>现在 Docker 已经安装好了，我们来启动 docker 进程:</p>
<pre><code><span class="variable">$ </span>sudo service docker start
</code></pre><p>设置开机启动:</p>
<pre><code>$ sudo chkconfig docker <span class="function_start"><span class="keyword">on</span></span>
</code></pre><p>现在，让我们确认 Docker 是否正常工作：</p>
<pre><code>$ sudo docker run -<span class="tag">i</span> -t fedora /bin/bash
</code></pre><p>继续 <a href="#启动Docker进程"> 启动 Docker 进程 </a></p>
<h2 id="启动_Docker_进程">启动 Docker 进程</h2><p>现在 Docker 已经安装好了，让我们来启动 Docker 进程</p>
<pre><code><span class="variable">$ </span>sudo service docker start
</code></pre><p>如果我们想要开机启动 Docker ，我们需要执行如下的命令：</p>
<pre><code>$ sudo chkconfig docker <span class="function_start"><span class="keyword">on</span></span>
</code></pre><p>现在测试一下是否正常工作.</p>
<pre><code>$ sudo docker run -<span class="tag">i</span> -t fedora /bin/bash
</code></pre><blockquote>
<p>注意: 如果你运行的时候提示一个  <code>Cannot start container</code> 的错误，错误中提到了 SELINUX 或者 权限不足。你需要更新 SELINUX 规则。你可以使用 <code>sudo yum upgrade selinux-policy</code> 然后重启。</p>
</blockquote>
<p><strong>下一步</strong></p>
<p>好！现在你可以去查看<a href="../userguide/README.md">用户指南</a>。</p>
<h2 id="自定义进程选项">自定义进程选项</h2><p>如果你想要添加一个 HTTP 代理，为 Docker 运行文件设置不同的目录或分区，又或者定制一些其它的功能，请阅读我们的系统文章，了解<a href="/articles/systemd.md">如何定制 Docker 进程</a></p>
<p>##问题</p>
<p>遇到问题请到 <a href="https://bugzilla.redhat.com/enter_bug.cgi?product=Fedora%20EPEL&amp;component=docker-io" target="_blank" rel="external">Red Hat Bugzilla for docker-io component</a> 进行反馈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux</h1><p>以下是支持 Docker 的 RHEL 版本：</p>
<ul>
<li><a href="#red-hat-enterprise-linux-7-]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openSUSE 安装 Docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/opensuse/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/opensuse/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:11:11.407Z</updated>
    <content type="html"><![CDATA[<h1 id="openSUSE">openSUSE</h1><p>Docker 支持 openSUSE 12.3 或更高版本。由于 Docker 的限制，Docker 只能运行在64位的主机上。</p>
<p>Docker 不被包含在 openSUSE 12.3 和 openSUSE 13.1 的官方镜像仓库中。因此需要添加 OBS 的 <a href="https://build.opensuse.org/project/show/Virtualization" title="Virtualization repository " target="_blank" rel="external">虚拟化仓库</a> 来安装 <code>docker</code> 包</p>
<p>执行下边的命令来添加虚拟化仓库(Virtualization repository)：</p>
<pre><code><span class="comment"># openSUSE 12.3</span>
<span class="variable">$ </span>sudo zypper ar -f <span class="symbol">http:</span>/<span class="regexp">/download.opensuse.org/repositories</span><span class="regexp">/Virtualization/open</span>SUSE_12.<span class="number">3</span>/ <span class="constant">Virtualization</span>

<span class="comment"># openSUSE 13.1</span>
<span class="variable">$ </span>sudo zypper ar -f <span class="symbol">http:</span>/<span class="regexp">/download.opensuse.org/repositories</span><span class="regexp">/Virtualization/open</span>SUSE_13.<span class="number">1</span>/ <span class="constant">Virtualization</span>
</code></pre><p>在 openSUSE 13.2版本以后就不需要添加额外的库了。</p>
<p>###SUSE Linux Enterprise</p>
<p>可以在 SUSE Linux Enterprise 12 或 更高版本上来运行 Docker 。这里需要注意的是由于 Docker 当前的限制，只能在<strong>64位</strong>的主机上运行。</p>
<p>##安装</p>
<p>安装 Docker 包</p>
<pre><code><span class="variable">$ </span>sudo zypper <span class="keyword">in</span> docker
</code></pre><p>现在已经安装完毕，让我们来启动 docker 进程</p>
<pre><code><span class="variable">$ </span>sudo systemctl start docker
</code></pre><p>设置开机启动 docker：</p>
<pre><code>$ sudo systemctl <span class="built_in">enable</span> docker
</code></pre><p>Docker 包会创建一个的叫 <code>docker</code> 的群组 ,如果想使用非 root 用户来运行，这个用户需要是 <code>docker</code> 群组的成员才可以与 docker 进程进行交互，你可以使用如下命令添加用户：</p>
<pre><code>$ sudo usermod -<span class="tag">a</span> -G docker &lt;username&gt;
</code></pre><p>确认一切都是否按照预期工作：</p>
<pre><code>$ sudo docker <span class="command">run</span> <span class="comment">--rm -i -t opensuse /bin/bash</span>
</code></pre><p>这条命令将下载和导入 <code>opensuse</code> 镜像，并且在容器内运行 bash，输入 exit 来退出容器。</p>
<p>如果你想要你的容器能够访问外部的网络，你就需要开启 <code>net.ipv4.ip_forward</code> 规则。这里你可以使用 YaST 工具查找 Network Devices -&gt; Network Settings -&gt; Routing 按钮来确认 IPv4 Forwarding 选择框是否被选中。</p>
<p>当由 Network Manager 来管理网络的时候，就不能按照上边的方法设置了。这里我们需要手动的编辑 <code>/etc/sysconfig/SuSEfirewall2</code> 文件来确保 <code>FW_ROUTE</code> 被设置成 <code>yes</code>,如下：</p>
<pre><code><span class="setting">FW_ROUTE=<span class="value"><span class="string">"yes"</span></span></span>
</code></pre><h2 id="自定义进程选项">自定义进程选项</h2><p>如果你想要添加一个 HTTP 代理，为 Docker 运行文件设置不同的目录或分区，又或者定制一些其它的功能，请阅读我们的系统文章，了解<a href="/articles/systemd.md">如何定制 Docker 进程</a></p>
<p>##下一步</p>
<p>阅读<a href="../userguide/README.md">用户指南</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="openSUSE">openSUSE</h1><p>Docker 支持 openSUSE 12.3 或更高版本。由于 Docker 的限制，Docker 只能运行在64位的主机上。</p>
<p>Docker 不被包含在 openSUSE 12.3 和 openS]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac OS X 安装 Docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/mac/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/mac/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:11:01.294Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac_OS_X_安装_Docker">Mac OS X 安装 Docker</h1><blockquote>
<p>注意：<br>该 Docker 版本为了支持 Docker 机,于是不再支持 Boot2Docker 命令行。使用 Docker Toolbox 和其它 Docker 工具来安装 Docker 机。</p>
</blockquote>
<p>您可以利用 Docker Toolbox 来安装 Docker。Docker Toolbox 提供了以下工具：</p>
<ul>
<li>用于运行 docker-machine 二进制文件的 <code>Docker Machine</code></li>
<li>用于运行 docker 二进行文件的 <code>Docker Engine</code></li>
<li>用于运行 docker-compose 二进行文件的 <code>Docker Compose (Mac 特有)</code></li>
<li>Kitematic，Docker 的图形用户界面</li>
<li>用于 Docker 命令行环且预先配置好的 shell</li>
<li>Oracle VM VirtualBox</li>
</ul>
<p>由于 Docker 的后台程序使用了 Linux 特有的内核特性，所以您不能直接在 OS X 上运行 Docker。相反，您必须使用 <code>docker-machine</code> 来创建并附加一台虚拟机（VM）。该虚拟机需要安装 Linux 操作系统以便在您 Mac 机上运行 Docker。</p>
<p>####前提条件</p>
<p>您 Mac 机的 OS X 版本必须大于等于 10.8 “Snow Leopard” 才可以安装 Docker Toolbox。</p>
<p>###在安装之前先来了解一些关键概念</p>
<p>当我们在一台 Linux 主机上安装完 Docker 之后，我们的机器中就包含了本地主机和 Docker 主机。如果从网络层来划分，本地主机就代表你的电脑，而 Docker 主机就是运行 container 的那台机器。</p>
<p>在 Linux 机器上的一种典型安装 Docker 方法：Docker 客户端，Docker 后台程序和 container 会直接运行在您的机器上。这就意味着您可以使用标准的本地主机寻址（例如 <code>localhost:8000</code> 或者 <code>0.0.0.0:8376</code>）来为 Docker container 分配一个地址。</p>
<p><img src="../images/linux_docker_host.svg" alt="linux_docker_host"></p>
<p>在 OS X 上安装的 Docker ，其 Docker 后台程序是运行在一个名为 <code>default</code> 的 Linux 虚拟机上的。<code>default</code> 是 Linux 上的一个轻量级的虚拟机，是专门用于在 Mac OS X 机器上运行 Docker 的。</p>
<p><img src="../images/mac_docker_host.svg" alt="mac_docker_host"></p>
<p>在 OS X 中，Docker 主机地址就是 Linux 虚拟机的地址。当你使用 <code>docker-machine</code> 启动虚拟机的时候，该虚拟机会自动获取到 IP 地址。当您开启一个 container 的时候，container 上的端口会映射到虚拟机的端口上。本页面上的实践操作会一一印证上述内容。</p>
<p>###安装</p>
<p>如果您有一个正在运行着的 VirtualBox，那么请您在运行安装器（Docker Toolbox）之前务必关闭它。</p>
<ol>
<li><p>进入 <a href="https://www.docker.com/toolbox" target="_blank" rel="external">Docker Toolbox</a> 页面。</p>
</li>
<li><p>点击 Docker Toolbox 下载链接，进行下载。</p>
</li>
<li><p>双击安装包或者通过右击并在快捷菜单中选择“打开”的方式安装 Docker Toolbox。</p>
<p>此时会弹出“Install Docker Toolbox”（安装 Docker 工具箱）窗口。</p>
<p><img src="../images/mac-welcome-page.png" alt="mac-welcome-page"></p>
</li>
<li><p>点击“继续”（Continue），安装 toolbox。</p>
<p>此时，toolbox 会展现给你一些选项，供您自定义标准安装。</p>
<p><img src="../images/mac-page-two.png" alt="mac-page-two"></p>
<p>默认情况下，标准的 Docker Toolbox 安装是这样的：</p>
<ul>
<li>向 <code>/usr/local/bin</code> 目录中添加 Docker 工具的二进制文件。</li>
<li>修改权限使得这些二进制文件可供任何用户使用。</li>
<li>更新现有的 VirtualBox 安装。</li>
</ul>
<p><br><br>通过点击“自定义”或“更改安装目录”修改这些默认安装值。</p>
</li>
<li><p>点击“安装”，执行标准安装。</p>
<p>系统提示您输入密码。</p>
<p><img src="../images/mac-password-prompt.png" alt="mac-password-prompt"></p>
</li>
<li><p>输入密码，继续安装</p>
<p>安装完成后，Docker Toolbox 会为您提供一些信息，通过这些信息您可以完成一些常见的任务。 </p>
</li>
<li><p>点击“关闭”，离开当前窗口。</p>
</li>
</ol>
<p>##运行 Docker Container</p>
<p>想要运行一个 Docker 容器，你需要做如下内容：</p>
<ul>
<li>创建一个新的（或开启一台已存在的）Docker 虚拟机</li>
<li>从您当前的环境切换到新的虚拟机的环境中</li>
<li>利用 <code>docker</code> 客户端创建，加载并管理 container</li>
</ul>
<p>一旦您创建了一台虚拟机，您就可以随时使用它。如同任意一台 VirtualBox 虚拟机，在每次使用它的时候都会保存其配置。</p>
<p>这里提供两种使用 Docker Toolbox 的方法：使用 Docker 的快速入门终端或使用您的 shell 环境。</p>
<p>###使用 Docker 的快速入门终端</p>
<ol>
<li>打开“应用程序”文件夹或“启动面板”。</li>
<li><p>找到 Docker 快速入门终端并双击启动它。</p>
<p>该应用程序：</p>
<ul>
<li>开启一个终端窗口</li>
<li>如果还没有虚拟机的化，请创建一台名叫 <code>default</code> 的虚拟机；如果已经存在这样一台虚拟机，请你开启它。</li>
<li>将当前终端环境切换到虚拟机环境中。</li>
</ul>
<p>一旦启动完成，Docker 快速入门终端会是如下状态：</p>
<p><img src="../images/mac-success.png" alt="mac-success"><br>现在，您可以运行 <code>docker</code> 命令了。</p>
</li>
<li><p>通过运行 <code>hello-world</code> container 来核实您的安装是否成功。</p>
</li>
</ol>
   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line"><span class="number">511136</span>ea3c5a: Pull complete</span><br><span class="line"><span class="number">31</span>cbccb51277: Pull complete</span><br><span class="line">e45a5af57b00: Pull complete</span><br><span class="line">hello-world:latest: The image you are pulling has been verified.</span><br><span class="line">Important: image verification is <span class="operator">a</span> tech preview feature <span class="operator">and</span> should <span class="operator">not</span> be</span><br><span class="line">relied <span class="command"><span class="keyword">on</span> <span class="title">to</span> <span class="title">provide</span> <span class="title">security</span>.</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line">Hello <span class="built_in">from</span> Docker.</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"><span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"><span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line">   (Assuming <span class="keyword">it</span> was <span class="operator">not</span> already locally available.)</span><br><span class="line"><span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">   executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"><span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">   <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line">$ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"><span class="keyword">http</span>://docs.docker.com/userguide/</span><br></pre></td></tr></table></figure>
<p>一个可以和 Docker 工具进行交互的另一种典型方法就是：从您的 shell 命令行入手。</p>
<p>###使用shell 命令行<br>该部分假设您正在运行一个 Bash shell。您运行的可能是不同的 shell，例如 C shell，但是不用担心，命令都是一样的。</p>
<ol>
<li><p>创建一个新的 Docker 虚拟机。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   $ docker-machine <span class="operator"><span class="keyword">create</span> <span class="comment">--driver virtualbox default      </span></span><br><span class="line"></span><br><span class="line">   Creating VirtualBox VM...</span><br><span class="line">   Creating SSH <span class="keyword">key</span>...</span><br><span class="line">   <span class="keyword">Starting</span> VirtualBox VM...</span><br><span class="line">   <span class="keyword">Starting</span> VM...</span><br><span class="line">   <span class="keyword">To</span> see how <span class="keyword">to</span> <span class="keyword">connect</span> Docker <span class="keyword">to</span> this machine, run: docker-machine env <span class="keyword">default</span></span><br><span class="line">   <span class="string">``</span><span class="string">` </span><br><span class="line">  </span><br><span class="line">   这就在 VirtualBox 中创建了一台新的 `</span><span class="keyword">default</span><span class="string">` 虚拟机。</span><br><span class="line">   </span><br><span class="line">   该命令还会在 `</span>~/.docker/machine/machines/<span class="keyword">default</span><span class="string">` 目录下生成一个 docker machine 的配置文件。您只需执行一次 `</span><span class="keyword">create</span><span class="string">` 命令。然后，您可以使用 `</span>docker-machine<span class="string">` 命令来开启，停止，查询并管理虚拟机。</span><br><span class="line"></span><br><span class="line">2. 列出所有可用的 docker machine。</span></span></span><br></pre></td></tr></table></figure>
<p>$ docker-machine ls<br>NAME                ACTIVE   DRIVER       STATE     URL                         SWARM<br>default             *        virtualbox   Running   tcp://192.168.99.101:2376  </p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   如果您之前安装了现在已经舍弃了的 Boot2Docker 这个应用程序的话或者您运行了 Docker 快速入门终端，在列表中还会有一个 <span class="escape">`d</span>ev<span class="escape">` </span>虚拟机。当   您创建 <span class="escape">`d</span>efault<span class="escape">` </span>虚拟机的时候，<span class="escape">`d</span>ocker-machine<span class="escape">` </span>命令给出了一些指导，以便您您连接虚拟机。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 获取 <span class="escape">`d</span>efault<span class="escape">` </span>虚拟机的环境变量</span><br></pre></td></tr></table></figure>
<p>$ docker-machine env default<br>export DOCKER_TLS_VERIFY=”1”<br>export DOCKER_HOST=”tcp://192.168.99.101:2376”<br>export DOCKER_CERT_PATH=”/Users/mary/.docker/machine/machines/default”<br>export DOCKER_MACHINE_NAME=”default”</p>
<h1 id="Run_this_command_to_configure_your_shell:">Run this command to configure your shell:</h1><h1 id="eval_“$(docker-machine_env_default)”">eval “$(docker-machine env default)”</h1><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span>. 连接到 <span class="escape">`d</span>efault<span class="escape">` </span>虚拟机</span><br></pre></td></tr></table></figure>
<p>$ eval “$(docker-machine env default)”</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">5</span>. 运行 <span class="escape">`h</span>ello-world<span class="escape">` </span>container 来验证您的安装是否已经成功。</span><br></pre></td></tr></table></figure>
<p>docker run hello-world</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##学习 Toolbox 安装</span></span><br><span class="line"></span><br><span class="line">Toolbox 将 Docker Engine 的可执行文件和 Docker 的可执行文件下载到您的系统中。当您使用 Docker 快速入门终端或手动创建一个 `<span class="javascript"><span class="keyword">default</span></span>` 虚拟机的时候，Docker Machine 会更新 `<span class="javascript">~<span class="regexp">/.docker/m</span>achine/machines/<span class="keyword">default</span></span>` 文件。该文件夹中包含了虚拟机的配置文件。</span><br><span class="line"></span><br><span class="line">您可以利用 Docker Machine 在系统中创建多个虚拟机，那么也就会有多个虚拟机的配置文件。如果您想要删除某台虚拟机，请您使用 `<span class="javascript">docker-machine rm &lt;machine-name&gt;</span>` 命令。</span><br><span class="line"></span><br><span class="line"><span class="comment">##从 Boot2Docker 迁移</span></span><br><span class="line">如果您现在用的还是 Boot2Docker 的话，在您的本地系统中还会有一个 `<span class="javascript">boot2docker-vm</span>` 虚拟机。为了允许 Docker Machine 管理该台虚拟机，你可以对它进行迁移。</span><br><span class="line"><span class="number">1.</span> 打开一个终端或 Docker 的命令行界面。</span><br><span class="line"><span class="number">2.</span> 输入以下命令。</span><br></pre></td></tr></table></figure>
<p>docker-machine create -d virtualbox –virtualbox-import-boot2docker-vm boot2docker-vm docker-vm<br>```</p>
</li>
<li>使用 <code>docker-machine</code> 命令与该台要被迁移的虚拟机进行交互。<br><code>docker-machine</code> 的子命令和 <code>boot2docker</code> 的子命令比起来还是有一些不同之处的。下面这个表列出了对比了二者的不同并介绍其功能。   </li>
</ol>
<table>
<thead>
<tr>
<th><strong><code>boot2docker</code></strong></th>
<th><strong><code>docker-machine</code></strong></th>
<th><strong><code>docker-machine</code></strong> description</th>
</tr>
</thead>
<tbody>
<tr>
<td>init</td>
<td>create</td>
<td>Creates a new docker host.</td>
</tr>
<tr>
<td>up</td>
<td>start</td>
<td>Starts a stopped machine.</td>
</tr>
<tr>
<td>ssh</td>
<td>ssh</td>
<td>Runs a command or interactive ssh session on the machine.</td>
</tr>
<tr>
<td>save</td>
<td>-</td>
<td>Not applicable.</td>
</tr>
<tr>
<td>down</td>
<td>stop</td>
<td>Stops a running machine.</td>
</tr>
<tr>
<td>poweroff</td>
<td>stop</td>
<td>Stops a running machine.</td>
</tr>
<tr>
<td>reset</td>
<td>restart</td>
<td>Restarts a running machine.</td>
</tr>
<tr>
<td>config</td>
<td>inspect</td>
<td>Prints machine configuration details.</td>
</tr>
<tr>
<td>status</td>
<td>ls</td>
<td>Lists all machines and their status.</td>
</tr>
<tr>
<td>info</td>
<td>inspect</td>
<td>Displays a machine’s details.</td>
</tr>
<tr>
<td>ip</td>
<td>ip</td>
<td>Displays the machine’s ip address.</td>
</tr>
<tr>
<td>shellinit</td>
<td>env</td>
<td>Displays shell commands needed to configure your shell to interact with a machine.</td>
</tr>
<tr>
<td>delete</td>
<td>rm</td>
<td>Removes a machine.</td>
</tr>
<tr>
<td>download</td>
<td>-</td>
<td>Not applicable.</td>
</tr>
<tr>
<td>upgrade</td>
<td>upgrade</td>
<td>Upgrades a machine’s Docker client to the latest stable release.</td>
</tr>
</tbody>
</table>
<p>##Mac OS X 上 Docker 的实例<br>通过了解本小节，您可以尝试在虚拟机上进行一些可行的 container 任务。现在，您应该有一台运行着的虚拟机，且通过 shell 脚本可以连接到该虚拟机。为了验证上面所说的，可以执行如下命令来验证:</p>
<pre><code>$ docker-machine ls
NAME                ACTIVE   DRIVER       STATE     URL                         SWARM
<span class="keyword">default</span>             *        virtualbox   Running   <span class="string">tcp:</span><span class="comment">//192.168.99.100:2376   </span>
</code></pre><p>该台处于 <code>ACTIVE</code> 状态的虚拟机，即本例中的 default 虚拟机，就是您的环境所指向的虚拟机。</p>
<p>###访问 container 的端口</p>
<ol>
<li><p>在 DOCKER_HOST 上开启一个NGINX container。</p>
<pre><code>$ docker <span class="command">run</span> -d -P <span class="comment">--name web nginx</span>
</code></pre><p>一般来说，<code>docker run</code> 命令会开启一个 container，并运行它，最后关闭它。加上 <code>-d</code> 这个参数，container 就可以在您执行了 <code>docker run</code> 这条命令后继续在后台运行了。加上 <code>-P</code> 这个参数就可以将 container 监听的那个端口告知给 Docker Host；这样您就可以在您的 Mac 机上访问 container 了。</p>
</li>
<li><p>执行 <code>docker ps</code> 命令，查看运行着的 container</p>
<pre><code>CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                                           NAMES
<span class="number">5f</span>b65ff765e9        nginx:latest  
</code></pre><p>此时，您会发现 <code>nginx</code> 依然在后台运行。</p>
</li>
<li><p>查看 container 的端口</p>
<pre><code>$ docker port web
<span class="number">443</span>/tcp -&gt; <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">49156</span>
<span class="number">80</span>/tcp -&gt; <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">49157</span>
</code></pre><p>该命令显示出的内容会告诉你 <code>web</code> container 的 <code>80</code> 端口已经映射到了 Docker Host 上的 <code>49157</code> 端口上。</p>
</li>
<li><p>在您的浏览器中输入地址 <code>http://localhost:49157</code>（localhost 就是 0.0.0.0）。</p>
<p> <img src="../images/bad_host1.png" alt="bad_host1"><br>并没有生效，其原因就是 <code>DOCKER_HOST</code> 的地址并不是你本地的机器的地址（0.0.0.0），而是您的 Docker 虚拟机的地址。</p>
</li>
<li><p>获取 Docker 虚拟机（即 <code>default</code>）的地址。</p>
<pre><code>$ docker-machine ip <span class="keyword">default</span>
<span class="number">192.168</span><span class="number">.59</span><span class="number">.103</span>
</code></pre></li>
<li><p>在您的浏览器中输入地址 <code>http://192.168.59.103:49157</code></p>
<p> <img src="../images/good_host1.png" alt="good_host1"><br>成功了！</p>
</li>
<li><p>如果您想停止并删除正在运行的 <code>nginx</code> container 的话，请执行如下操作：</p>
<pre><code><span class="variable">$ </span>docker stop web
<span class="variable">$ </span>docker rm web
</code></pre></li>
</ol>
<p>###为容器挂载一个卷</p>
<p>当您开启一个 container 的时候，系统会自动将您本机中的 <code>/Users/username</code> 目录共享给 Docker 虚拟机。通过本次共享，您可以将该目录挂载到您的 container 上。下面的内容将会介绍如何做到这些。</p>
<ol>
<li><p>跳转到您的用户 <code>$HOME</code> 目录下。</p>
<pre><code>$ cd <span class="variable">$HOME</span>
</code></pre></li>
<li><p>创建一个新的 <code>site</code> 目录。</p>
<pre><code><span class="variable">$ </span>mkdir site
</code></pre></li>
<li><p>跳转到 <code>site</code> 目录中。</p>
<pre><code>$ <span class="built_in">cd</span> site
</code></pre></li>
<li><p>创建一个新的 <code>index.html</code> 文件。</p>
<pre><code>$ <span class="keyword">echo</span> <span class="string">"my new site"</span> &gt; <span class="built_in">index</span>.html
</code></pre></li>
<li><p>开启一个新 <code>nginx</code> container 并将 <code>html</code> 目录替换为 <code>site</code> 目录。</p>
<pre><code>$ docker run -d -P -v <span class="variable">$HOME</span>/site:/usr/share/nginx/html --name mysite nginx
</code></pre></li>
<li><p>获取到 <code>mysite</code> 这个 container 的端口。</p>
<pre><code>$ docker port mysite
<span class="number">80</span>/tcp -&gt; <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">49166</span>
<span class="number">443</span>/tcp -&gt; <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">49165</span>
</code></pre></li>
<li><p>在浏览器中输入地址：</p>
<p> <img src="../images/newsite_view1.png" alt="newsite_view1"></p>
</li>
<li><p>立即添加一个文件到 <code>$HOME/siet</code> 目录下。</p>
<pre><code>$ <span class="built_in">echo</span> <span class="string">"This is cool"</span> &gt; cool.html
</code></pre></li>
<li><p>在浏览器中输入地址：</p>
<p> <img src="../images/cool_view1.png" alt="cool_view1"></p>
</li>
<li><p>停止然后删除正在运行的 <code>mysite</code> container。</p>
<pre><code><span class="variable">$ </span>docker stop mysite
<span class="variable">$ </span>docker rm mysite
</code></pre></li>
</ol>
<p>##更新 Docker Toolbox</p>
<p>为更新Docker Toolbox, 需要下载并重新运行<a href="https://docker.com/toolbox/" target="_blank" rel="external">Docker Toolbox安装器</a>.</p>
<p>##卸载 Docker Toolbox</p>
<p>按照以下步骤卸载Toolbox：</p>
<ol>
<li><p>列出所有的虚拟机</p>
<pre><code>$ docker-machine ls
NAME                ACTIVE   DRIVER       STATE     URL                         SWARM
dev                 *        virtualbox   Running   <span class="string">tcp:</span><span class="comment">//192.168.99.100:2376   </span>
my-docker-machine            virtualbox   Stopped                               
<span class="keyword">default</span>                      virtualbox   Stopped  
</code></pre></li>
<li><p>删除（列出的）每一台虚拟机.</p>
<pre><code>$ docker-machine rm <span class="built_in">dev</span>
Successfully removed <span class="built_in">dev</span>
</code></pre><p>删除一台虚拟机，意味着从<code>VirtualBox</code>和<code>~/.docker/machine/machines</code>目录中同时删除虚拟机文件。 </p>
</li>
<li><p>从“应用程序“文件夹中删除Docker快捷终端（Quickstart Terminal）和Kitematic.</p>
</li>
<li><p>从/usr/local/bin文件夹中删除docker, docker-compose和 docker-machine命令文件.</p>
<pre><code>$ rm <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker
</code></pre></li>
<li><p>从系统中删除 <code>~/.docker</code> 文件夹.</p>
</li>
</ol>
<p>##学习更多</p>
<p>使用”docker-machine help”命令可以列出关于Docker Machine的全部命令行参考信息.参照<a href="https://docs.docker.com/machine/" target="_blank" rel="external">Docker Machine文档</a>来获得关于如何使用 SSH 或者 SCP 访问虚拟机的信息。<br>接下来，可以继续了解<a href="https://docs.docker.com/userguide" target="_blank" rel="external">Docker用户手册</a> . 如果对使用Kitematic图形界面工具感兴趣，可以参考阅读 <a href="https://docs.docker.com/kitematic/userguide/" target="_blank" rel="external">Kitermatic用户手册</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mac_OS_X_安装_Docker">Mac OS X 安装 Docker</h1><blockquote>
<p>注意：<br>该 Docker 版本为了支持 Docker 机,于是不再支持 Boot2Docker 命令行。使用 Docker Toolbox ]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Cloud Platform版本的]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/google/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/google/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:10:42.799Z</updated>
    <content type="html"><![CDATA[<h1 id="Google_Cloud_Platform">Google Cloud Platform</h1><p>###Google Compute Enginer 镜像快速入门</p>
<p>1.去谷歌云控制台，创建一个新的云计算项目，启用云引擎</p>
<p>2.使用如下的命令来下载谷歌云 SDK 并配置您的项目：</p>
<pre><code>$ curl https://sdk.cloud.google.com | bash
$ gcloud auth login
$ gcloud config <span class="operator"><span class="keyword">set</span> <span class="keyword">project</span> &lt;google-cloud-<span class="keyword">project</span>-<span class="keyword">id</span>&gt;</span>
</code></pre><p>3.启动一个新实例，使用最新的 Container-optimized 镜像:(选择一个接近你所需实例大小的分区)</p>
<pre><code>$ gcloud compute instances create docker-playground \
-<span class="ruby">-image <span class="symbol">https:</span>/<span class="regexp">/www.googleapis.com/compute</span><span class="regexp">/v1/projects</span><span class="regexp">/google-containers/global</span><span class="regexp">/images/container</span>-vm-v20140522 \
</span>-<span class="ruby">-zone us-central1-a \
</span>-<span class="ruby">-machine-type f1-micro</span>
</code></pre><p>4.用ssh来连接这个实例：</p>
<pre><code>$ gcloud compute ssh <span class="comment">--zone us-central1-a docker-playground</span>
docker-playground:~$ sudo docker <span class="command">run</span> hello-world
</code></pre><p>当 Docker 输出 hello word 消息的时候，说明你的 Docker 工作正常。</p>
<p>更多，请阅读 <a href="https://developers.google.com/compute/docs/containers" target="_blank" rel="external"> google 云平台部署容器 </a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Google_Cloud_Platform">Google Cloud Platform</h1><p>###Google Compute Enginer 镜像快速入门</p>
<p>1.去谷歌云控制台，创建一个新的云计算项目，启用云引擎</p>
<p>2.使用如]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debian支持 Docker]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/debian/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/debian/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:09:45.088Z</updated>
    <content type="html"><![CDATA[<h1 id="Debian">Debian</h1><p>以下版本的 Debian 支持 Docker：</p>
<ul>
<li><a href="#debian-jessie-80-64-bit">Debian 8.0 Jessie (64-bit)</a></li>
<li><a href="#debian-wheezystable-7x-64-bit">Debian 7.7 Wheezy (64-bit)</a></li>
</ul>
<p>##Debian Jessie 8.0 (64-bit)Debian</p>
<p>Debian 8 使用的是 3.14.0 的内核版本，可以从 Debian 的镜像源来安装 <code>docker.io</code> 包。</p>
<blockquote>
<p>提示：Debian 包含一个特别老的KDE3/GNOME2包叫 <code>docker</code> ,所以我们把这个包叫<code>docker.io</code>。</p>
</blockquote>
<p>###安装</p>
<p>安装最新版的 Debian 软件包（可能不是最新版本 Docker ）</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span>
$ sudo apt-<span class="built_in">get</span> install docker.io
</code></pre><p>验证 Docker 是否正常工作 ：</p>
<pre><code>$ sudo docker run -<span class="tag">i</span> -t  Ubuntu  /bin/bash
</code></pre><p>该命令将下载 <code>Ubuntu</code> 镜像，并且在容器内运行 <code>bash</code>.</p>
<blockquote>
<p>注意：如果你打算启用内存和交换空间设置，请查看<a href="./ubuntu.md">这里</a></p>
</blockquote>
<p>##Debian Wheezy/Stable 7.x (64-bit)</p>
<p>安装 Docker 需要内核在3.8版本以上，但是 Wheezy 的内核版本是 3.2（<a href="https://github.com/docker/docker/issues/407%20kernel%20versions" target="_blank" rel="external">bug #407</a>对 Docker 需要3.8版本内核进行了讨论。）</p>
<p>幸运的是，官方提供了 <code>wheezy-backports</code> ，它内核版本是3.16，可以支持 Docker。</p>
<p>###安装</p>
<ol>
<li><p>从 wheezy-backports 镜像源来安装内核</p>
<p> 在 <code>/etc/apt/sources.list</code> 文件下添加如下内容：</p>
<pre><code>deb <span class="string">http:</span><span class="comment">//http.debian.net/debian wheezy-backports main</span>
</code></pre><p> 安装 <code>linux-image-amd64</code> 包  (注意使用 <code>-t wheezy-backports</code>)</p>
<pre><code>$ sudo apt-get <span class="operator"><span class="keyword">update</span>
$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> -<span class="keyword">t</span> wheezy-backports linux-image-amd64</span>
</code></pre></li>
<li><p>从 get.docker.com 获取安装脚本并安装：</p>
<pre><code>curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span>
</code></pre></li>
</ol>
<p>###使用非root</p>
<p>docker 进程通过监听一个 Unix Socket 来替代 TCP 端口。在默认情况下，docker 的 Unix Socket属于<code>root</code>用户，当然其他用户可以使用<code>sudo</code>方式来访问。因为这个原因， docker 进程就一直是<code>root</code>用户运行的。</p>
<p>如果你（或者说你安装Docker的时候）创建一个叫 <code>docker</code> 的用户组，并为用户组添加用户。这时候，当 Docker 进程启动的时候，<code>docker</code> 用户组对 Unix Socket 有了读/写权限。 你必须使用root用户来运行 docker 进程，但你可以用 <code>docker</code> 群组用户来使用 docker 客户端，你再使用 docker 命令的时候前边就不需要加 <code>sudo</code> 了。从Docker 0.9版本开始，你可以使用<code>-G</code>来指定用户组。</p>
<blockquote>
<p>警告：Docker 用户组（或者用 <code>-G</code> 指定的用户组）有等同于root用户的权限，有关系统安全影响的细节，请查看 <a href="">Docker 进程表面攻击细节</a></p>
</blockquote>
<p>操作演示：</p>
<pre><code><span class="comment"># Add the docker group if it doesn't already exist.</span>
<span class="variable">$ </span>sudo groupadd docker

<span class="comment"># Add the connected user "${USER}" to the docker group.</span>
<span class="comment"># Change the user name to match your preferred user.</span>
<span class="comment"># You may have to logout and log back in again for</span>
<span class="comment"># this to take effect.</span>
<span class="variable">$ </span>sudo gpasswd -a <span class="variable">${</span><span class="constant">USER</span>} docker

<span class="comment"># Restart the Docker daemon.</span>
<span class="variable">$ </span>sudo service docker restart
<span class="comment">##下一步</span>
</code></pre><p>继续阅读<a href="../userguide/README.md">用户指南</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Debian">Debian</h1><p>以下版本的 Debian 支持 Docker：</p>
<ul>
<li><a href="#debian-jessie-80-64-bit">Debian 8.0 Jessie (64-bit)</a></li>
<l]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microsoft Azure]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/azure/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/azure/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:08:59.714Z</updated>
    <content type="html"><![CDATA[<p>#Microsoft Azure</p>
<p>##在 Azure 上创建 Docker 主机。</p>
<p>请仔细阅读由 <a href="http://azure.microsoft.com/" target="_blank" rel="external">Microsoft Azure</a> 网站上提供的详细教程，教程中包含了使用不同方法在 Azure 上创建 Docker 虚拟主机。</p>
<ul>
<li><a href="http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-docker-vm-extension/" target="_blank" rel="external"> Azure 的 Docker 虚拟主机组件 </a><ul>
<li><a href="http://azure.microsoft.com/documentation/articles/virtual-machines-docker-with-xplat-cli/" target="_blank" rel="external"> 如何使用 Azure 提供的跨平台接口使用 Docker 虚拟机组件 </a></li>
<li><a href="http://azure.microsoft.com/documentation/articles/virtual-machines-docker-with-portal/" target="_blank" rel="external"> 如何在 Azure 用户中心使用 Docker 虚拟机组件 </a> </li>
</ul>
</li>
<li><a href="http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-docker-machine/" target="_blank" rel="external"> 在 Azure 上使用 Docker 虚拟机 </a></li>
</ul>
<h2 id="下一步?">下一步?</h2><p>阅读 <a href="../userguide/">用户指南</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#Microsoft Azure</p>
<p>##在 Azure 上创建 Docker 主机。</p>
<p>请仔细阅读由 <a href="http://azure.microsoft.com/" target="_blank" rel="external">Micro]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Arch Linux]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/installation/archlinux/"/>
    <id>http://yoursite.com/2015/12/08/docker/installation/archlinux/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:08:48.043Z</updated>
    <content type="html"><![CDATA[<h1 id="Arch_Linux">Arch Linux</h1><p>你可以使用 Arch Linux 社区发布的 Docker 软件包进行安装：</p>
<ul>
<li><a href="https://www.archLinux.org/packages/community/x86_64/docker/" target="_blank" rel="external">docker</a></li>
</ul>
<p>或者使用 AUR 包</p>
<ul>
<li><a href="https://aur.archLinux.org/packages/docker-git/" target="_blank" rel="external">docker-git</a></li>
</ul>
<p><code>docker</code> 软件包将会安装最新版本的 Docker。<code>docker-git</code> 则是由当前master分支构建的包。</p>
<p>###依赖关系</p>
<p>Docker 依赖于几个指定的安装包，核心的几个依赖包为：</p>
<ul>
<li>bridge-utils</li>
<li>device-mapper</li>
<li>iproute2</li>
<li>lxc</li>
<li>sqlite</li>
</ul>
<p>###安装</p>
<p>一般包的简单安装：</p>
<pre><code><span class="title">pacman</span> -S docker
</code></pre><p>这就安装了你所需要的一切。</p>
<p>对于AUR包的执行：</p>
<pre><code><span class="title">yaourt</span> -S docker-git
</code></pre><p>这里假设你已经安装好了 yaourt.如果你之前没有安装构建过这个包，请参考 <a href="https://wiki.archLinux.org/index.php/Arch_User_Repository#Installing_packages" target="_blank" rel="external">Arch User Repository</a> .</p>
<p>###开启Docker</p>
<p>Docker 会创建一个系统服务，用下面命令来启动 Docker：</p>
<pre><code><span class="variable">$ </span>sudo systemctl start docker
</code></pre><p>设置开机启动：</p>
<pre><code>$ sudo systemctl <span class="built_in">enable</span> docker
</code></pre><h2 id="自定义进程选项">自定义进程选项</h2><p>如果你想要添加一个 HTTP 代理，为 Docker 运行文件设置不同的目录或分区，又或者定制一些其它的功能，请阅读我们的系统文章，了解<a href="/articles/systemd.md">如何定制 Docker 进程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Arch_Linux">Arch Linux</h1><p>你可以使用 Arch Linux 社区发布的 Docker 软件包进行安装：</p>
<ul>
<li><a href="https://www.archLinux.org/packages/commun]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装 Compose]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/compose/install/"/>
    <id>http://yoursite.com/2015/12/08/docker/compose/install/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:06:31.992Z</updated>
    <content type="html"><![CDATA[<h1 id="安装_Compose">安装 Compose</h1><p>在安装 Compose之前，你需要先安装好 Docker 。然后你需要使用 <code>curl</code> 指令来安装 Compose</p>
<p>###安装 Docker</p>
<p>首先，你需要安装大于或者等于1.6版本的 Docker 。</p>
<ul>
<li><a href="../installation/mac.md">MAC OSX 安装指南</a></li>
<li><a href="../installation/ubuntu.md">Ubuntu  安装指南</a></li>
<li><a href="../installation/">其它系统安装指南</a></li>
</ul>
<p>###安装 Compose</p>
<p>运行下边的命令来安装 Compose：</p>
<pre><code>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/compose/releases</span><span class="regexp">/download/</span><span class="number">1.3</span>.<span class="number">1</span>/docker-compose-<span class="string">`uname -s`</span>-<span class="string">`uname -m`</span> &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>-compose
chmod +x /usr/local/bin/docker-compose
</code></pre><blockquote>
<p>注意：如果你在安装的时候出现了  “Permission denied” 的错误信息，这说明你的 <code>/usr/local/bin</code> 目录是不可写的，你需要使用超级用户来安装。运行 <code>sudo -i</code> , 然后运行上边的两个命令，然后 <code>exit</code> 退出。</p>
</blockquote>
<p>可选，你也可以在 shell 中使用命令行安装。</p>
<p>Compose 适用于 OS X 和 64位的Linux 。 如果你使用其他平台，你可以安装一个 Compose 的 Python 包来完成安装。</p>
<pre><code>$ sudo pip <span class="keyword">install</span> -U docker-compose
</code></pre><p>到这里安装就结束了；Compose已经安装完成。你可以使用 <code>docker-compose --version</code> 来进行测试 。</p>
<p>###升级</p>
<p>如果你使用的是 Compose 1.2或者早期版本，当你升级完成后，你需要删除或者迁移你现有的容器。这是因为，1.3版本， Composer 使用 Docker 标签来对容器进行检测，所以它们需要重新创建索引标记。</p>
<p>如果 Composer 检测到创建的容器没有标签，它将拒绝运行，这样你就不会有两组容器。如果你想要保留已经存在的容器（举例：这里有容器的数据卷上保留这非常重要的数据），你可以使用下边的命令来迁移：</p>
<pre><code>docker-compose migrate-<span class="keyword">to</span>-labels
</code></pre><p>或者，如果这些容器是不必要的，你可以删除它们 - Composer 会重新创建一个新的。</p>
<pre><code>docker rm <span class="operator">-f</span> myapp_web_1 myapp_db_1 ...
</code></pre><p>###Compose 文档</p>
<ul>
<li><a href="../compose/">用户指南</a></li>
<li><a href="../compose/cli.md">使用命令行</a></li>
<li><a href="../compose/yml.md">Yaml 文件使用</a></li>
<li><a href="../compose/env.md">Compose 环境变量</a></li>
<li><a href="../compose/completion.md">命令行安装Compose</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装_Compose">安装 Compose</h1><p>在安装 Compose之前，你需要先安装好 Docker 。然后你需要使用 <code>curl</code> 指令来安装 Compose</p>
<p>###安装 Docker</p>
<p>首先，你需]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Docker中运行SSH进程服务]]></title>
    <link href="http://yoursite.com/2015/12/08/docker/examples/running_ssh_service/"/>
    <id>http://yoursite.com/2015/12/08/docker/examples/running_ssh_service/</id>
    <published>2015-12-07T23:56:29.000Z</published>
    <updated>2015-12-08T07:08:23.991Z</updated>
    <content type="html"><![CDATA[<h1 id="在Docker中运行SSH进程服务">在Docker中运行SSH进程服务</h1><p>以下是用<code>Dockerfile</code>设置sshd服务容器，您可以使用连接并检查其他容器的卷,或者可以快速访问测试容器。</p>
<pre><code><span class="comment"># sshd</span>
<span class="comment">#</span>
<span class="comment"># VERSION               0.0.1</span>

<span class="built_in">FROM</span>     ubuntu:<span class="number">12.04</span>
<span class="built_in">MAINTAINER</span> Thatcher R. Peskens <span class="string">"thatcher@dotcloud.com"</span>

<span class="comment"># make sure the package repository is up to date</span>
<span class="built_in">RUN</span> <span class="bash">apt-get update
</span>
<span class="built_in">RUN</span> <span class="bash">apt-get install -y openssh-server
</span><span class="built_in">RUN</span> <span class="bash">mkdir /var/run/sshd
</span><span class="built_in">RUN</span> <span class="bash"><span class="built_in">echo</span> <span class="string">'root:screencast'</span> |chpasswd
</span>
<span class="built_in">EXPOSE</span> <span class="number">22</span>
CMD    [<span class="string">"/usr/sbin/sshd"</span>, <span class="string">"-D"</span>]
</code></pre><p>使用如下命令构建镜像：</p>
<pre><code>$ sudo docker build <span class="comment">--rm -t eg_sshd .</span>
</code></pre><p>然后运行它，你可以使用<code>docker port</code>来找出容器端口22映射到主机的端口</p>
<pre><code>$ sudo docker run -d -P --name test_sshd eg_sshd
$ sudo docker port test_sshd <span class="number">22</span>
<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">49154</span>
</code></pre><p>现在你可以使用ssh登陆Docker进程的主机IP地址，端口是49154(IP地址可以使用ifconfig获取)：</p>
<pre><code>$ ssh root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span> -p <span class="number">49154</span>
<span class="preprocessor"># The password is ``screencast``.</span>
$$
</code></pre><p>最后，清理停止的容器，并且删除容器，然后删除镜像。</p>
<pre><code><span class="variable">$ </span>sudo docker stop test_sshd
<span class="variable">$ </span>sudo docker rm test_sshd
<span class="variable">$ </span>sudo docker rmi eg_sshd
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在Docker中运行SSH进程服务">在Docker中运行SSH进程服务</h1><p>以下是用<code>Dockerfile</code>设置sshd服务容器，您可以使用连接并检查其他容器的卷,或者可以快速访问测试容器。</p>
<pre><code><spa]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
  </entry>
  
</feed>
